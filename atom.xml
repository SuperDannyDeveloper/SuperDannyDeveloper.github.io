<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>皮卡丘♪～(´ε｀　)</title>
  <subtitle>一个不知天高地厚的小屁孩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="superdanny.link/"/>
  <updated>2017-05-13T09:13:28.000Z</updated>
  <id>superdanny.link/</id>
  
  <author>
    <name>SuperDanny</name>
    <email>boy736809040@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IJKPlayer相关指南</title>
    <link href="superdanny.link/2017/05/09/iOS-IJKPlayer/"/>
    <id>superdanny.link/2017/05/09/iOS-IJKPlayer/</id>
    <published>2017-05-09T07:32:00.000Z</published>
    <updated>2017-05-13T09:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>公司以前的直播业务是用Flash开发。为了适应趋势，从去年开始，公司打算使用原生进行开发。这里整理了一些相关的资料。对自己以后也许有所帮助。所谓前人种树，后人乘凉。在此，感谢所有默默无闻分享自己一线经验的老前辈们。</p>
<a id="more"></a> 
<h2 id="参数相关"><a href="#参数相关" class="headerlink" title="参数相关"></a>参数相关</h2><p><code>IJKFFOptions</code>参数说明</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打开h265硬解</span></div><div class="line">ijkMediaPlayer.setOption(IjkMediaPlayer.OPT_CATEGORY_PLAYER, <span class="string">"mediacodec-hevc"</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">//如果是rtsp协议，可以优先用tcp(默认是用udp)</span></div><div class="line">[options setFormatOptionValue:<span class="string">@"tcp"</span> forKey:<span class="string">@"rtsp_transport"</span>];</div><div class="line"><span class="comment">//播放前的探测Size，默认是1M, 改小一点会出画面更快</span></div><div class="line">[options setFormatOptionIntValue:<span class="number">1024</span>*<span class="number">16</span>*<span class="number">0.5</span> forKey:<span class="string">@"probsize"</span>];</div><div class="line"><span class="comment">//播放前的探测时间</span></div><div class="line">[options setFormatOptionIntValue:<span class="number">50000</span> forKey:<span class="string">@"analyzeduration"</span>];</div><div class="line"><span class="comment">//开启/关闭 硬解码（硬件解码CPU消耗低。软解，更稳定）</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">0</span> forKey:<span class="string">@"videotoolbox"</span>];</div><div class="line"><span class="comment">//解码参数，画面更清晰</span></div><div class="line">[options setCodecOptionIntValue:IJK_AVDISCARD_DEFAULT forKey:<span class="string">@"skip_loop_filter"</span>];</div><div class="line">[options setCodecOptionIntValue:IJK_AVDISCARD_DEFAULT forKey:<span class="string">@"skip_frame"</span>];</div><div class="line"></div><div class="line"><span class="comment">//以下是直播、点播参数设置不同</span></div><div class="line"><span class="keyword">if</span> (直播) &#123;</div><div class="line">   <span class="comment">// Param for living</span></div><div class="line">   <span class="comment">//最大缓存大小是3秒，可以依据自己的需求修改</span></div><div class="line">   [options setPlayerOptionIntValue:<span class="number">3000</span> forKey:<span class="string">@"max_cached_duration"</span>];</div><div class="line">   <span class="comment">//无限读</span></div><div class="line">   [options setPlayerOptionIntValue:<span class="number">1</span> forKey:<span class="string">@"infbuf"</span>];  </div><div class="line">   <span class="comment">//关闭播放器缓冲</span></div><div class="line">   [options setPlayerOptionIntValue:<span class="number">0</span> forKey:<span class="string">@"packet-buffering"</span>];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="comment">// Param for playback</span></div><div class="line">   [options setPlayerOptionIntValue:<span class="number">0</span> forKey:<span class="string">@"max_cached_duration"</span>];</div><div class="line">   [options setPlayerOptionIntValue:<span class="number">0</span> forKey:<span class="string">@"infbuf"</span>];</div><div class="line">   [options setPlayerOptionIntValue:<span class="number">1</span> forKey:<span class="string">@"packet-buffering"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在视频帧处理不过来的时候丢弃一些帧达到同步的效果</span></div><div class="line"><span class="comment">//跳帧开关，如果cpu解码能力不足，可以设置成5，否则会引起音视频不同步，也可以通过设置它来跳帧达到倍速播放</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">5</span><span class="comment">/*0*/</span> forKey:<span class="string">@"framedrop"</span>];</div><div class="line"><span class="comment">//最大fps</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">30</span> forKey:<span class="string">@"max-fps"</span>];</div><div class="line"><span class="comment">//帧速率(fps) 可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">29.97</span> forKey:<span class="string">@"r"</span>];</div><div class="line"><span class="comment">//设置音量大小，256为标准音量。（要设置成两倍音量时则输入512，依此类推）</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">512</span> forKey:<span class="string">@"vol"</span>];</div><div class="line"><span class="comment">//指定最大宽度</span></div><div class="line">[options setPlayerOptionIntValue:<span class="number">960</span> forKey:<span class="string">@"videotoolbox-max-frame-width"</span>];</div><div class="line"><span class="comment">//自动转屏开关</span></div><div class="line">[options setFormatOptionIntValue:<span class="number">0</span> forKey:<span class="string">@"auto_convert"</span>];</div><div class="line"><span class="comment">//重连次数</span></div><div class="line">[options setFormatOptionIntValue:<span class="number">1</span> forKey:<span class="string">@"reconnect"</span>];</div><div class="line"><span class="comment">//超时时间，timeout参数只对http设置有效。若果你用rtmp设置timeout，ijkplayer内部会忽略timeout参数。rtmp的timeout参数含义和http的不一样。</span></div><div class="line">[options setFormatOptionIntValue:<span class="number">30</span> * <span class="number">1000</span> * <span class="number">1000</span> forKey:<span class="string">@"timeout"</span>];</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>skip_loop_filter</code>参数相关</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for codec option 'skip_loop_filter' and 'skip_frame'</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> IJKAVDiscard &#123;</div><div class="line">    <span class="comment">/* We leave some space between them for extensions (drop some</span></div><div class="line">     * keyframes for intra-only or drop just some bidir frames). */</div><div class="line">    IJK_AVDISCARD_NONE    =<span class="number">-16</span>, <span class="comment">///&lt; discard nothing</span></div><div class="line">    IJK_AVDISCARD_DEFAULT =  <span class="number">0</span>, <span class="comment">///&lt; discard useless packets like 0 size packets in avi</span></div><div class="line">    IJK_AVDISCARD_NONREF  =  <span class="number">8</span>, <span class="comment">///&lt; discard all non reference</span></div><div class="line">    IJK_AVDISCARD_BIDIR   = <span class="number">16</span>, <span class="comment">///&lt; discard all bidirectional frames</span></div><div class="line">    IJK_AVDISCARD_NONKEY  = <span class="number">32</span>, <span class="comment">///&lt; discard all frames except keyframes</span></div><div class="line">    IJK_AVDISCARD_ALL     = <span class="number">48</span>, <span class="comment">///&lt; discard all</span></div><div class="line">&#125; IJKAVDiscard;</div></pre></td></tr></table></figure>
<blockquote>
<p>前面两个都看得懂<br>第三个是抛弃非参考帧（I帧）<br>第四个是抛弃B帧<br>第五个是抛弃除关键帧以外的，比如B，P帧<br>第六个是抛弃所有的帧，这我就奇怪了，之前Android默认的就是48，难道把所有帧都丢了？<br>那就没有视频帧了，所以应该不是这么理解，应该是skip_loop_filter和skip_frame的对象要过滤哪些帧类型。</p>
<p>skip_loop_filter这个是解码的一个参数，叫环路滤波，设置成48和0，图像清晰度对比，0比48清楚，理解起来就是，0是开启了环路滤波，过滤的是大部分，而48基本没启用环路滤波，所以清晰度更低，但是解码性能开销小<br>skip_loop_filter（环路滤波）简言之：<br>a:环路滤波器可以保证不同水平的图像质量。<br>b:环路滤波器更能增加视频流的主客观质量，同时降低解码器的复杂度。</p>
<p>具体参考：<br><a href="http://blog.csdn.net/h514434485/article/details/52241778" target="_blank" rel="external">http://blog.csdn.net/h514434485/article/details/52241778</a><br><a href="http://www.cnblogs.com/TaigaCon/p/5500110.html" target="_blank" rel="external">http://www.cnblogs.com/TaigaCon/p/5500110.html</a><br>skip_frame我没完全理解意思，应该是等同上面这个类似。</p>
</blockquote>
<h2 id="相关问题以及解决方案"><a href="#相关问题以及解决方案" class="headerlink" title="相关问题以及解决方案"></a>相关问题以及解决方案</h2><h3 id="1、达不到秒开，首屏显示慢，后来把播放前探测时间改为1"><a href="#1、达不到秒开，首屏显示慢，后来把播放前探测时间改为1" class="headerlink" title="1、达不到秒开，首屏显示慢，后来把播放前探测时间改为1"></a>1、达不到秒开，首屏显示慢，后来把播放前探测时间改为1</h3><blockquote>
<p>//播放前的探测时间<br>[options setFormatOptionIntValue:1 forKey:@”analyzeduration”];</p>
</blockquote>
<h3 id="2、音画不同步，有同事发现在模拟器的情况下音画不同步，刚开始理解以为是CPU处理画面处理不过来，所以加了framedrop参数-做了丢帧处理，后来才明白是因为模拟器处理效率低，不需要做丢帧处理"><a href="#2、音画不同步，有同事发现在模拟器的情况下音画不同步，刚开始理解以为是CPU处理画面处理不过来，所以加了framedrop参数-做了丢帧处理，后来才明白是因为模拟器处理效率低，不需要做丢帧处理" class="headerlink" title="2、音画不同步，有同事发现在模拟器的情况下音画不同步，刚开始理解以为是CPU处理画面处理不过来，所以加了framedrop参数 做了丢帧处理，后来才明白是因为模拟器处理效率低，不需要做丢帧处理"></a>2、音画不同步，有同事发现在模拟器的情况下音画不同步，刚开始理解以为是CPU处理画面处理不过来，所以加了framedrop参数 做了丢帧处理，后来才明白是因为模拟器处理效率低，不需要做丢帧处理</h3><blockquote>
<p>//开启硬解码（硬件解码CPU消耗低。软解，更稳定）<br>[options setPlayerOptionIntValue:1 forKey:@”videotoolbox”];</p>
</blockquote>
<h3 id="3、延迟产生的原因以及优化"><a href="#3、延迟产生的原因以及优化" class="headerlink" title="3、延迟产生的原因以及优化"></a>3、延迟产生的原因以及优化</h3><ol>
<li>产生原因<br>保证直播的流畅性是指在直播过程中保证播放不发生卡顿，卡顿是指在播放过程中声音和画面出现停滞，非常影响用户体验。造成卡顿的原因有几种情况:<br>(1) 推流端网络抖动导致数据无法发送到服务器，造成播放端卡顿;<br>(2) 播放端网络抖动导致数据累积在服务器上拉不下来，造成播放卡顿。<br>由于从服务器到播放器的网络情况复杂，尤其是在3G和带宽较差的WIFI环境下，抖动和延迟经常发生，导致播放不流畅，播放不流畅带来的负面影响就是延时增大。如何在网络抖动的情况下保证播放的流畅性和实时性是保障直播性能的难点。</li>
<li>流畅度优化<br>目前主流的直播协议是RTMP、HTTP-FLV和HLS，都是基于TCP的长连接。在播放的过程中，若播放端所处的网络环境在一个较佳的状态，此时播放会很流畅。若网络环境不是很稳定，经常会发生抖动，如果播放端没有做特殊处理，可能会经常发生卡顿，严重的甚至会出现黑屏。而移动直播由于其便捷性，用户可以随时随地发起和观看直播，我们无法保证用户的网络一直处于一个非常好的状态，所以，在网络不稳定的情况下保证播放的流畅度是非常重要的。<br>为了解决这个问题，首先播放器需要将拉流线程和解码线程分开，并建立一个缓冲队列用于缓冲音视频数据。拉流线程将从服务器上获取到的音视频流放入队列，解码线程从队列中获取音视频数据进行解码播放，队列的长度可以调整。当网络发生抖动时，播放器无法从服务器上获取到数据或获取数据的速度较慢，此时队列中缓存的数据可以起到一个过渡的作用，让用户感觉不到网络发生了抖动。<br>当然这是对于网络发生抖动的情况所采取的策略，如果播放端的网络迟迟不能恢复或者服务器的边缘结点 出现宕机，则需要应用层进行重连或调度。</li>
</ol>
<h3 id="4、软硬编解码的选择"><a href="#4、软硬编解码的选择" class="headerlink" title="4、软硬编解码的选择"></a>4、软硬编解码的选择</h3><p>软编解码：使用CPU进行编解码，大多使用FFmpeg来编码和解压音视频数据；<br>硬编解码：主要使用非CPU进行编解码，如GPU等。在使用中，大多直接调用系统API进行音视频编解码处理。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">软编<br>解码</td>
<td>在不同的设备、系统版本中兼容性极高；<br>解码时，色彩还原度更高；<br>编解码过程可扩展性强；</td>
<td>CPU占用高，手机易发热，耗电量大。</td>
</tr>
<tr>
<td style="text-align:center">硬编<br>解码</td>
<td>系统占用少，执行效率高。</td>
<td>兼容性低，需根据硬件厂商和系统版本单独适配；<br>可控性比较差；</td>
</tr>
</tbody>
</table>
<p>综合以上情况，在推流方面，iOS系统和硬件设备统一性高，使用全硬编方案效果更好；Android因机型繁杂，支持程度不一，推荐4.3以上使用硬编。在播放解码方面，iOS硬解和软解支持性都较高，软解功耗更高，但是在部分细节方面表现较优，可控性强，具体视项目情况选择；Android推荐4.1版本以上使用硬解，以下版本使用软解。</p>
<p>未完待续…</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;公司以前的直播业务是用Flash开发。为了适应趋势，从去年开始，公司打算使用原生进行开发。这里整理了一些相关的资料。对自己以后也许有所帮助。所谓前人种树，后人乘凉。在此，感谢所有默默无闻分享自己一线经验的老前辈们。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="ijkPlayer" scheme="superdanny.link/tags/ijkPlayer/"/>
    
  </entry>
  
  <entry>
    <title>扩展NSDecimalNumber实现高精度金额计算</title>
    <link href="superdanny.link/2017/04/27/iOS-High-precision-calculation02/"/>
    <id>superdanny.link/2017/04/27/iOS-High-precision-calculation02/</id>
    <published>2017-04-27T09:35:00.000Z</published>
    <updated>2017-06-08T05:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前转过一篇谈论<a href="/2016/12/14/iOS-High-precision-calculation/">NSDecimalNumber实现金融类等高精度计算</a>的文章。现在将自己完善封装的工具类放出来，供大家使用。如果有任何优化改善的地方，麻烦留言。</p>
<a id="more"></a> 
<h2 id="NSString-Calculate"><a href="#NSString-Calculate" class="headerlink" title="NSString+Calculate"></a>NSString+Calculate</h2><p><strong>.h文件</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">Calculate</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)stringByAdding:(<span class="built_in">NSString</span> *)bString;</div><div class="line">- (<span class="built_in">NSString</span> *)stringBySubtracting:(<span class="built_in">NSString</span> *)bString;</div><div class="line">- (<span class="built_in">NSString</span> *)stringByMultiplyingBy:(<span class="built_in">NSString</span> *)bString;</div><div class="line">- (<span class="built_in">NSString</span> *)stringByDividingBy:(<span class="built_in">NSString</span> *)bString;</div><div class="line">- (<span class="built_in">BOOL</span>)isBig:(<span class="built_in">NSString</span> *)bString;</div><div class="line">- (<span class="built_in">NSComparisonResult</span>)ob_compare:(<span class="built_in">NSString</span> *)bString;</div><div class="line"><span class="comment">///去掉尾巴是0或者.的位数(10.000 -&gt; 10 // 10.100 -&gt; 10.1)</span></div><div class="line">- (<span class="built_in">NSString</span> *)ridTail;</div><div class="line"><span class="comment">///保留数据类型2位小数(如果是10.000 -&gt; 10 // 10.100 -&gt; 10.1)</span></div><div class="line">+ (<span class="built_in">NSString</span> *)formatterNumber:(<span class="built_in">NSNumber</span> *)number;</div><div class="line"><span class="comment">///保留数据类型fractionDigits位小数</span></div><div class="line">+ (<span class="built_in">NSString</span> *)formatterNumber:(<span class="built_in">NSNumber</span> *)number fractionDigits:(<span class="built_in">NSUInteger</span>)fractionDigits;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>.m文件</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span> (<span class="title">Calculate</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)stringByAdding:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc]initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc]initWithString:bString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *c = [a decimalNumberByAdding:b];</div><div class="line">    <span class="built_in">NSString</span> *cString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, c];</div><div class="line">    <span class="built_in">NSString</span> *rid = [cString ridTail];</div><div class="line">    <span class="keyword">return</span> rid;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)stringBySubtracting:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:bString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *c = [a decimalNumberBySubtracting:b];</div><div class="line">    <span class="built_in">NSString</span> *cString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, c];</div><div class="line">    <span class="built_in">NSString</span> *rid = [cString ridTail];</div><div class="line">    <span class="keyword">return</span> rid;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)stringByMultiplyingBy:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:bString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *c = [a decimalNumberByMultiplyingBy:b];</div><div class="line">    <span class="built_in">NSString</span> *cString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, c];</div><div class="line">    <span class="built_in">NSString</span> *rid = [cString ridTail];</div><div class="line">    <span class="keyword">return</span> rid;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)stringByDividingBy:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([[bString ridTail] isEqualToString:<span class="string">@"0"</span>]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"除数为0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:bString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *c = [a decimalNumberByDividingBy:b];</div><div class="line">    <span class="built_in">NSString</span> *cString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, c];</div><div class="line">    <span class="built_in">NSString</span> *rid = [cString ridTail];</div><div class="line">    <span class="keyword">return</span> rid;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, c];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isBig:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:bString];</div><div class="line">    <span class="keyword">if</span> ([a compare:b] == <span class="built_in">NSOrderedAscending</span>) &#123;<span class="comment">//上升</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([a compare:b] == <span class="built_in">NSOrderedDescending</span>) &#123;<span class="comment">//下降</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//相等</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSComparisonResult</span>)ob_compare:(<span class="built_in">NSString</span> *)bString &#123;</div><div class="line">    <span class="built_in">NSString</span> *aString = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:aString].length == <span class="number">0</span>) &#123;</div><div class="line">        aString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSString</span> filterNULLValue:bString].length == <span class="number">0</span>) &#123;</div><div class="line">        bString = <span class="string">@"0"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *a = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:aString];</div><div class="line">    <span class="built_in">NSDecimalNumber</span> *b = [[<span class="built_in">NSDecimalNumber</span> alloc] initWithString:bString];</div><div class="line">    <span class="keyword">return</span> [a compare:b];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)ridTail &#123;</div><div class="line">    <span class="built_in">NSString</span> *string = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> (![string containsString:<span class="string">@"."</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> string;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ([string hasSuffix:<span class="string">@"0"</span>]) &#123;</div><div class="line">        string = [string substringToIndex:string.length - <span class="number">1</span>];</div><div class="line">        string = [string ridTail];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([string hasSuffix:<span class="string">@"."</span>]) &#123;</div><div class="line">        string = [string substringToIndex:string.length - <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> string;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> string;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSString</span> *)formatterNumber:(<span class="built_in">NSNumber</span> *)number &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> formatterNumber:number fractionDigits:<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSString</span> *)formatterNumber:(<span class="built_in">NSNumber</span> *)number fractionDigits:(<span class="built_in">NSUInteger</span>)fractionDigits &#123;</div><div class="line">    <span class="built_in">NSNumberFormatter</span> *numberFormatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</div><div class="line">    [numberFormatter setMaximumFractionDigits:fractionDigits];</div><div class="line">    [numberFormatter setMinimumFractionDigits:<span class="number">0</span>];</div><div class="line">    [numberFormatter setMinimumIntegerDigits:<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [numberFormatter stringFromNumber:number];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 使用这句话的原因，是为了避免使用数据的时候出现空或者其他的，导致闪退</span></div><div class="line">+ (<span class="built_in">NSString</span> *)filterNULLValue: (<span class="built_in">NSString</span> *)string &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> * newStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,string];</div><div class="line">    <span class="keyword">if</span> ([newStr isKindOfClass:[<span class="built_in">NSNull</span> <span class="keyword">class</span>]] ||</div><div class="line">        newStr == <span class="literal">nil</span> ||</div><div class="line">        [newStr isEqualToString:<span class="string">@"(null)"</span>]||</div><div class="line">        [newStr isEqualToString:<span class="string">@""</span>] ||</div><div class="line">        [newStr isEqualToString:<span class="string">@"null"</span>] ||</div><div class="line">        [newStr isEqualToString:<span class="string">@"&lt;null&gt;"</span>]) &#123;</div><div class="line">        newStr = <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前转过一篇谈论&lt;a href=&quot;/2016/12/14/iOS-High-precision-calculation/&quot;&gt;NSDecimalNumber实现金融类等高精度计算&lt;/a&gt;的文章。现在将自己完善封装的工具类放出来，供大家使用。如果有任何优化改善的地方，麻烦留言。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="金额计算" scheme="superdanny.link/tags/%E9%87%91%E9%A2%9D%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>UITableView/UICollectionView使用技巧</title>
    <link href="superdanny.link/2017/03/10/iOS-UITableView-UICollectionView-Skill/"/>
    <id>superdanny.link/2017/03/10/iOS-UITableView-UICollectionView-Skill/</id>
    <published>2017-03-10T08:42:00.000Z</published>
    <updated>2017-06-08T06:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知识是无穷无尽，技术需要积累，记录一点一滴，让成长的时间轴上变得充实一些。<br>今天就讲讲UITableView/UICollectionView的一些使用技巧。结合自己项目情况进行展开。</p>
<a id="more"></a>
<h2 id="Header-Footer高度、悬停设置"><a href="#Header-Footer高度、悬停设置" class="headerlink" title="Header/Footer高度、悬停设置"></a>Header/Footer高度、悬停设置</h2><h3 id="高度设置"><a href="#高度设置" class="headerlink" title="高度设置"></a>高度设置</h3><p>有时候我们需要设置 TableView 的头部和尾部的间距，如果 TableView 的 <code>Style</code> 是 <code>UITableViewStylePlain</code> 的话，头部尾部的高度只需要在代理里面设置高度就行。</p>
<p>但如果是 <code>UITableViewStyleGrouped</code> 类型，这个时候 TableView 是的头部以及尾部高度的设置需要麻烦一些。因为单纯在代理里面设置高度是无效的。<br>实现代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.01</span>f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kScreenWidth, <span class="number">1</span>)];</div><div class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForFooterInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kScreenWidth, <span class="number">1</span>)];</div><div class="line">    view.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的代码我们就可以正确的设置高度，同时需要注意的是，<code>UITableViewStyleGrouped</code>时，不能设置 TableView 的<code>tableFooterView</code>、<code>tableHeaderView</code>，不然高度设置会无效。</p>
<h3 id="悬停"><a href="#悬停" class="headerlink" title="悬停"></a>悬停</h3><p>TableView的悬停功能只有在 <code>Style</code> 是 <code>UITableViewStylePlain</code> 的时候才有。如果有这么一种需求，就是需要有Header悬停，同时每个section之间需要有间隔。<br>效果如下：</p>
<p><img src="http://wx2.sinaimg.cn/mw690/81f8a509gy1fdhw91vcc9g207p0dukae.gif" alt="TableView悬停"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> kHeaderHeight+<span class="number">9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    BillListModel *model = _sectionArr[section];</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *header = (&#123;</div><div class="line">        <span class="built_in">UIView</span> *bgView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, KScreenWidth, kHeaderHeight+<span class="number">9</span>)];</div><div class="line">        bgView.backgroundColor = [<span class="built_in">UIColorTools</span> colorWithTheme:<span class="built_in">UIColorThemeAppBgColor</span>];</div><div class="line">        </div><div class="line">        <span class="built_in">UILabel</span> *titleLab = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">9</span>, KScreenWidth, kHeaderHeight)];</div><div class="line">        titleLab.backgroundColor = [<span class="built_in">UIColorTools</span> colorWithTheme:<span class="built_in">UIColorThemeWhite</span>];</div><div class="line">        titleLab.textColor = [<span class="built_in">UIColorTools</span> colorWithTheme:<span class="built_in">UIColorThemeBlack</span>];</div><div class="line">        titleLab.text = model.time;</div><div class="line">        [bgView addSubview:titleLab];</div><div class="line">        </div><div class="line">        <span class="built_in">UIImageView</span> *lineHBottom = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, titleLab.mj_max_y - <span class="number">0.5</span>, KScreenWidth, <span class="number">0.5</span>)];</div><div class="line">        lineHBottom.backgroundColor = [<span class="built_in">UIColorTools</span> colorWithTheme:<span class="built_in">UIColorThemeSeparatorColor</span>];</div><div class="line">        [bgView addSubview:lineHBottom];</div><div class="line">        </div><div class="line">        bgView;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> header;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView  &#123;</div><div class="line">    <span class="keyword">if</span> (scrollView == _tableView) &#123;</div><div class="line">        <span class="built_in">UITableView</span> *tableview = (<span class="built_in">UITableView</span> *)scrollView;</div><div class="line">        <span class="built_in">CGFloat</span> sectionHeaderHeight = kHeaderHeight;</div><div class="line">        <span class="built_in">CGFloat</span> sectionFooterHeight = <span class="number">9</span>;</div><div class="line">        <span class="built_in">CGFloat</span> offsetY = tableview.contentOffset.y;</div><div class="line">        <span class="keyword">if</span> (offsetY &gt;= <span class="number">0</span> &amp;&amp; offsetY &lt;= sectionFooterHeight) &#123;</div><div class="line">            tableview.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-offsetY, <span class="number">0</span>, -sectionHeaderHeight, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetY &gt;= sectionFooterHeight &amp;&amp; offsetY &lt;= tableview.contentSize.height - tableview.frame.size.height - sectionHeaderHeight) &#123;</div><div class="line">            tableview.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-sectionFooterHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetY &gt;= <span class="number">0</span> &amp;&amp; tableview.contentSize.height &gt;= tableview.contentSize.height) &#123;</div><div class="line">            tableview.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(-sectionFooterHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CollectionView的悬停功能只有在 <code>Style</code> 是 <code>UITableViewStylePlain</code> 的时候才有。如果有这么一种需求，就是需要有Header悬停，同时每个section之间需要有间隔。<br>效果如下：</p>
<p><img src="http://wx1.sinaimg.cn/mw690/81f8a509gy1fdhw8vcx4gg207p0duqq5.gif" alt="CollectionView悬停"></p>
<h2 id="滚动监听"><a href="#滚动监听" class="headerlink" title="滚动监听"></a>滚动监听</h2><p><img src="http://wx4.sinaimg.cn/mw690/81f8a509gy1fdhw9ck7ijg207p0due81.gif" alt="滚动监听"></p>
<h3 id="UIScrollView-减速"><a href="#UIScrollView-减速" class="headerlink" title="UIScrollView 减速"></a>UIScrollView 减速</h3><p>可能通过decelerationRate的属性来设置，它的值域是（0.0，1.0）,当decelerationRate设置为0.1时，当手指touch up时就会很慢的停下来。</p>
<h3 id="UIScrollView-如何判断停止滑动"><a href="#UIScrollView-如何判断停止滑动" class="headerlink" title="UIScrollView 如何判断停止滑动"></a>UIScrollView 如何判断停止滑动</h3><p>这里停止滑动的意思要明确一下，有两种:</p>
<p>1、第一种是指手指停止ScrollView。</p>
<p>当手指停止滑动时，iOS会调UIScrollView的delegate</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate</div></pre></td></tr></table></figure>
<p>如果decelerate还为NO时，它最终停下，否则它还没最终停下</p>
<p>2、第二种是指ScrollView停止滑动，指的滚动条完全停止下来。</p>
<p>当decelerate = true时，iOS才会调UIScrollView的delegate</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView</div></pre></td></tr></table></figure>
<p>那UIScrollView真正停止滑动，应该怎么判断呢？<br>解决方法如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate &#123;</div><div class="line">    <span class="keyword">if</span>(!decelerate) &#123;   </div><div class="line">        <span class="comment">//OK,真正停止了，do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//然后</span></div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</div><div class="line">    <span class="comment">//OK,真正停止了,do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>当手指触摸后，scrollView会暂时拦截触摸事件，使用一个计时器，假如在计时器到点后，没有发生手指移动事件，那么，scrollView发送tracking events到被点击的subView。<br>假如在计时器到点前，发生了移动事件，那么scrollView取消tracking自己发生滚动。</p>
<p>子类可以重载<code>touchesShouldBegin:withEvent:inContentView:</code>决定自己是否接收touch事件。<br>当<code>pagingEnabled</code>值为<code>YES</code>，会自动滚动到subView的边界，默认是<code>NO</code>。</p>
<p><code>touchesShouldCancelInContentView:</code>开始发送tracking messages消息给subView的时候<br>调用这个方法，决定是否发送tracking messages消息到subview，假如返回<code>NO</code>，则发送，<code>YES</code>则不发送。</p>
<p>假如<code>canCancelContentTouches</code>属性是<code>NO</code>，则不调用这个方法来影响如何处理滚动手势。</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;知识是无穷无尽，技术需要积累，记录一点一滴，让成长的时间轴上变得充实一些。&lt;br&gt;今天就讲讲UITableView/UICollectionView的一些使用技巧。结合自己项目情况进行展开。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>苹果应用内购指南资料</title>
    <link href="superdanny.link/2017/03/07/iOS-In-App-Purchase/"/>
    <id>superdanny.link/2017/03/07/iOS-In-App-Purchase/</id>
    <published>2017-03-07T07:53:00.000Z</published>
    <updated>2017-03-07T07:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想自己搞一个APP，就顺便查阅了相关苹果资料。这里记录一下，方便以后查阅。</p>
<p><a href="https://developer.apple.com/library/prerelease/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectInAppPurchase_Guide_SCh/Chapters/Introduction.html" target="_blank" rel="external">iTunes Connect 的 In-App Purchase 配置指南</a></p>
<p><a href="https://developer.apple.com/in-app-purchase/In-App-Purchase-Guidelines.pdf" target="_blank" rel="external">iOS 和 OS X 中的 In-App Purchase 使用入门</a></p>
<p><a href="https://developer.apple.com/library/ios/technotes/tn2259/_index.html" target="_blank" rel="external">将 In-App Purchase 添加到您的 iOS 和 Mac 应用程序中</a></p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想自己搞一个APP，就顺便查阅了相关苹果资料。这里记录一下，方便以后查阅。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/LanguagesUti
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="应用内购" scheme="superdanny.link/tags/%E5%BA%94%E7%94%A8%E5%86%85%E8%B4%AD/"/>
    
  </entry>
  
  <entry>
    <title>为自己的 APP 瘦身</title>
    <link href="superdanny.link/2017/03/03/App-Thinning/"/>
    <id>superdanny.link/2017/03/03/App-Thinning/</id>
    <published>2017-03-03T06:17:00.000Z</published>
    <updated>2017-06-05T06:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>每次产品迭代的次数越多，你就会发现安装包的大小也会随之增大，因为有很多废弃的代码，UI素材堆积在项目里面，导致了冗余。这边按照自己亲身经验对APP进行瘦身。</p>
<a id="more"></a> 
<h2 id="说干就干"><a href="#说干就干" class="headerlink" title="说干就干"></a>说干就干</h2><h3 id="优化编译选项"><a href="#优化编译选项" class="headerlink" title="优化编译选项"></a>优化编译选项</h3><p>1、<code>BuildSettings -&gt; Optimization Level</code>，Xcode默认设置为<code>“Fastest, Smallest”</code>，保持默认即可。<br>2、<code>Build Settings -&gt; Linking -&gt; Dead Code Stripping</code> 设置成 <code>YES</code>。<br>3、<code>Deployment Postprocessing</code> 设置成 <code>YES</code>。<br>4、<code>Strip Linked Product</code> 设置成 <code>YES</code>。<br>5、工程的 <code>Enable C++ Exceptions</code> 和 <code>Enable Objective-C Exceptions</code> 选项都设置为 <code>NO</code>，手动管理异常（<strong>本人没有关闭</strong>）。<br>6、<code>symbols hidden by default</code> 选项设置为 <code>YES</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">瘦身结果</th>
<th style="text-align:center">总结</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">没什么变化</td>
<td style="text-align:center">配置编译选项未必能够较少安装包大小，根据实际情况而定。</td>
</tr>
</tbody>
</table>
<h3 id="优化图片"><a href="#优化图片" class="headerlink" title="优化图片"></a>优化图片</h3><ol>
<li><code>Targets -&gt; Build Settings -&gt; Compress PNG Files</code> 设置为 <code>NO</code>。</li>
<li>全部或绝大部分图要用压图软件手动压缩（推荐使用<code>TinyPNG</code>软件）。</li>
<li>不同尺寸兼容建议(如下)</li>
</ol>
<p>当遇到使用全屏帮助页时，一开始我是这样做的：</p>
<p><img src="http://wx2.sinaimg.cn/large/81f8a509gy1fd9m9yplafj208k04y0t0.jpg" alt="图一"></p>
<p>这样做导致了如果我帮助页多的话，就会导致安装包变大。其实这种情况一般能将这些帮助页放在网页是最合适不过的，因为使用频率不高。没必要放在项目中。但是如果非要放在项目中的话，我们就需要尽可能的想办法较少占用。</p>
<p>我们知道，iPhone的屏幕尺寸有着几种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">设备型号</th>
<th style="text-align:center">尺寸</th>
<th style="text-align:center">逻辑分辨率(point)</th>
<th style="text-align:center">设备分辨率(pixel)</th>
<th style="text-align:center">高宽比</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">iPhone 4/4s</td>
<td style="text-align:center">3.5寸</td>
<td style="text-align:center">320x480</td>
<td style="text-align:center">640x960</td>
<td style="text-align:center">640/960 = 1.5</td>
</tr>
<tr>
<td style="text-align:center">iPhone 5/5c/5s</td>
<td style="text-align:center">4寸</td>
<td style="text-align:center">320x568</td>
<td style="text-align:center">640x1136</td>
<td style="text-align:center">1136/640 = 1.775</td>
</tr>
<tr>
<td style="text-align:center">iPhone 6</td>
<td style="text-align:center">4.7寸</td>
<td style="text-align:center">375x667</td>
<td style="text-align:center">750x1334</td>
<td style="text-align:center">1334/750 = 1.775</td>
</tr>
<tr>
<td style="text-align:center">iPhone 6s</td>
<td style="text-align:center">5.5寸</td>
<td style="text-align:center">414x736</td>
<td style="text-align:center">1242x2208</td>
<td style="text-align:center">2208/1242 = 1.778</td>
</tr>
</tbody>
</table>
<p>那么是不是美工妹妹要切4套图呢，如果这样，编译的APP就非常大了！有经验的美工只会给你两套图！为什么呢？请看各型号手机的高宽比，发现了吧：只有4/4s的 高宽比是1.5其他都近视1.775！也就是说，我们通过判断手机的屏幕高度来区分加载那套图，然后做适当的等比例放大就行了！为了保险起见，个人建议保留3.5寸和4.7寸两套图(如下图)，然后根据如果是非3.5寸的屏幕时，固定宽度，高度=宽度*1.778。另外需要特别说明，4.7寸的图最好底部多留几个像素，方便拉伸。</p>
<p><img src="http://wx3.sinaimg.cn/large/81f8a509gy1fd9m9yyqi9j207k02w0su.jpg" alt="图二"></p>
<p>代码实现：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 获取对应屏幕尺寸图片</span></div><div class="line">+ (<span class="built_in">UIImage</span> *)getCurrentDrviceSizeLaunchImage &#123;</div><div class="line">    <span class="comment">//得到当前屏幕的尺寸</span></div><div class="line">    <span class="built_in">CGRect</span> rect_screen = [[<span class="built_in">UIScreen</span> mainScreen] bounds];</div><div class="line">    <span class="built_in">CGSize</span> size_screen = rect_screen.size;</div><div class="line">    </div><div class="line">    <span class="comment">//获得scale</span></div><div class="line">    <span class="built_in">CGFloat</span> scale_screen = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    </div><div class="line">    <span class="comment">//获取设备分辨率</span></div><div class="line">    <span class="built_in">CGFloat</span> width = size_screen.width*scale_screen;</div><div class="line">    <span class="built_in">CGFloat</span> height = size_screen.height*scale_screen;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *sizeStr = <span class="string">@"DefaultLaunch_3.5"</span>;<span class="comment">//@"640_960";</span></div><div class="line">    <span class="keyword">if</span> (width == <span class="number">640</span> &amp;&amp; height == <span class="number">1136</span>) &#123;</div><div class="line">        sizeStr = <span class="string">@"DefaultLaunch_4"</span>;<span class="comment">//@"750_1334";</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">750</span> &amp;&amp; height == <span class="number">1334</span>) &#123;</div><div class="line">        sizeStr = <span class="string">@"DefaultLaunch_4"</span>;<span class="comment">//@"750_1334";</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">1242</span> &amp;&amp; height == <span class="number">2208</span>) &#123;</div><div class="line">        sizeStr = <span class="string">@"DefaultLaunch_4"</span>;<span class="comment">//@"750_1334";</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">640</span> &amp;&amp; height == <span class="number">960</span>) &#123;</div><div class="line">        sizeStr = <span class="string">@"DefaultLaunch_3.5"</span>;<span class="comment">//@"640_960";</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:sizeStr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">瘦身结果</th>
<th style="text-align:center">总结</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">瘦身显著，UI素材从<strong>17.9M</strong>压缩到<strong>8.1M</strong></td>
<td style="text-align:center">UI素材一定要进行一遍压缩，因为UI人员未必会帮你压缩之后发给你，所以有时候一张素材少则几KB，多则几百KB不止。</td>
</tr>
</tbody>
</table>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>通过上面的各种折腾，安装包从原来的<strong>47.6M</strong>缩小为<strong>27.2M</strong>。当然，上传到AppStore之后会再大一些，不过总体来说已经缩小了很多了。</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;每次产品迭代的次数越多，你就会发现安装包的大小也会随之增大，因为有很多废弃的代码，UI素材堆积在项目里面，导致了冗余。这边按照自己亲身经验对APP进行瘦身。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS数据库操作之Realm初探</title>
    <link href="superdanny.link/2017/02/22/iOS-Realm/"/>
    <id>superdanny.link/2017/02/22/iOS-Realm/</id>
    <published>2017-02-22T07:44:00.000Z</published>
    <updated>2017-02-24T01:21:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>以前了解过 Realm 这个第三方数据库操作，但是没有深入的了解。这两天有空花了点时间看了一下文档，这边根据文档摘抄记录一下，方便以后使用到可以查阅。</p>
<a id="more"></a> 
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Realm数据模型是基于标准 Objective‑C 类来进行定义的，使用属性来完成模型的具体定义。</p>
<p>通过简单的继承 <code>RLMObject</code> 或者一个已经存在的模型类，您就可以创建一个新的 Realm 数据模型对象。</p>
<p>Realm模型对象在形式上基本上与其他 Objective‑C 对象相同 - 您可以给它们添加您自己的方法(method)和协议(protocol)，和在其他对象中使用类似。</p>
<p>主要的限制是某个对象只能在其被创建的那个线程中使用, 并且您无法访问任何存储属性的实例变量(ivar)。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Realm/Realm.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Person</span>;</span></div><div class="line"></div><div class="line"><span class="comment">// 狗狗的数据模型</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Dog</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> Person   *owner;</div><div class="line"><span class="keyword">@end</span></div><div class="line">RLM_ARRAY_TYPE(Dog) <span class="comment">// 定义RLMArray&lt;Dog&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 狗狗主人的数据模型</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span>      *name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSDate</span>        *birthdate;</div><div class="line"><span class="keyword">@property</span> RLMArray&lt;Dog&gt; *dogs;</div><div class="line"><span class="keyword">@end</span></div><div class="line">RLM_ARRAY_TYPE(Person) <span class="comment">// 定义RLMArray&lt;Person&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 实现文件</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Dog</span></span></div><div class="line"><span class="keyword">@end</span> <span class="comment">// 暂时没用</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="keyword">@end</span> <span class="comment">// 暂时没用</span></div></pre></td></tr></table></figure>
<p>由于 Realm 中定义的所有模型在程序启动时就会被解析，所以即使代码中没有调用，它们都需要被初始化。</p>
<p>在 Swift 中使用 Realm 的时候，Swift.reflect(_:) 函数可用于确定您模型中的信息，这需要确保 init() 已被成功调用。这意味着所有非可选的属性必须添加一个默认值。</p>
<p>通过 <a href="https://realm.io/docs/objc/latest/api/Classes/RLMObject#" target="_blank" rel="external">RLMObject</a> 可查看更多细节。</p>
<h3 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h3><p>Realm支持以下的属性类型：<code>BOOL</code>、<code>bool</code>、<code>int</code>、<code>NSInteger</code>、<code>long</code>、<code>long long</code>、<code>float</code>、<code>double</code>、<code>NSString</code>、<code>NSDate</code>、<code>NSData</code> 以及<a href="/#可空属性(Optional Properties">被特殊类型标记</a>)的 <code>NSNumber</code> 。</p>
<p>CGFloat 属性的支持被取消了，因为它不具备平台独立性。</p>
<p>您可以使用RLMArray<object *=""><object> 和 RLMObject的子类来建立诸如一对多、一对一之类的关系模型。</object></object></p>
<p>在 Xcode 7 以及之后的版本中，RLMArray支持编译时的 Objective‑C 泛型(generics)。下面是不同属性定义方法的意义以及用途：</p>
<ul>
<li><code>RLMArray</code>: 属性类型。</li>
<li><code>&lt;Object *&gt;</code>: 属性的特别化(generic specialization)，这可以阻止在编译时使用错误对象类型的数组。</li>
<li><code>&lt;Object&gt;</code>: 此 <code>RLMArray</code> 遵守的协议，可以让 Realm 知晓如何在运行时确定数据模型的架构。 </li>
</ul>
<h3 id="属性特性-attributes"><a href="#属性特性-attributes" class="headerlink" title="属性特性(attributes)"></a>属性特性(attributes)</h3><p>注意由于 Realm 在自己的引擎内部有很好的语义解释系统，所以 Objective‑C 的许多属性特性将被忽略，如<code>nonatomic</code>, <code>atomic</code>, <code>strong</code>, <code>copy</code> 和 <code>weak</code> 等。 因此为了避免误解，我们推荐您在编写数据模型的时候不要使用任何的属性特性。 当然，如果您已经设置了这些属性特性，那么在 <code>RLMObject</code> 对象被写入 Realm 数据库前，这些特性会一直生效。 无论 <code>RLMObject</code> 对象是否受到 Realm 管理，您为其编写的自定义 getter 和 setter 方法都能正常工作。</p>
<p>如果您在 Swift 中使用 Objective-C 版本的 Realm 的话，模型的属性前面需要加上 <code>dynamic var</code>，这是为了让这些属性能够被底层数据库数据所访问。</p>
<h3 id="可空属性-Optional-Properties"><a href="#可空属性-Optional-Properties" class="headerlink" title="可空属性(Optional Properties)"></a>可空属性(Optional Properties)</h3><p>通常情况下，<code>NSString *</code>、<code>NSData *</code> 以及 <code>NSDate *</code> 属性可以设置为 <code>nil</code>。如果你不需要实现此功能，你可以重写您的 <code>RLMObject</code> 子类的 <code>+requiredProperties</code> 方法。</p>
<p>比如对于以下的模型定义来说，如果尝试给 <code>name</code> 属性设置为 <code>nil</code> 将会抛出一个异常，但是将 <code>birthday</code> 属性设置为 <code>nil</code> 却是允许的：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSDate</span> *birthday;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line">+ (<span class="built_in">NSArray</span> *)requiredProperties &#123;</div><div class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>存储可空数字目前已经可以通过 <code>NSNumber *</code> 属性完成。</p>
<p>由于 Realm 对不同类型的数字采取了不同的存储格式，因此设置可空的数字属性必须是 <code>RLMInt</code>、<code>RLMFloat</code>、<code>RLMDouble</code> 或者 <code>RLMBool</code> 类型。所有赋给属性的值都会被转换为其特定的类型。</p>
<p>比如说，如果我们存储一个用户的年龄(age)而不是存储他们的生日，同时还要允许当您不知道该用户的年龄的时候将 <code>age</code> 属性设置为 <code>nil</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span>&lt;RLMInt&gt; *age;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line">+ (<span class="built_in">NSArray</span> *)requiredProperties &#123;</div><div class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>RLMProperty</code> 的子类属性始终都可以为 <code>nil</code>，因此这些类型不能够放在 <code>requiredProperties</code>中，并且 <code>RLMArray</code> 不支持存储 <code>nil</code> 值。</p>
<h3 id="索引属性-Indexed-Properties"><a href="#索引属性-Indexed-Properties" class="headerlink" title="索引属性(Indexed Properties)"></a>索引属性(Indexed Properties)</h3><p>重写 <code>+indexedProperties</code> 方法可以为数据模型中需要添加索引的属性建立索引：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Book</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="keyword">float</span> price;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></div><div class="line">+ (<span class="built_in">NSArray</span> *)indexedProperties &#123;</div><div class="line">  <span class="keyword">return</span> @[<span class="string">@"title"</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>Realm 支持字符串、整数、布尔值以及 <code>NSDate</code> 属性作为索引。</p>
<p>对属性进行索引可以减少插入操作的性能耗费，加快比较检索的速度（比如说 = 以及 IN 操作符）。</p>
<h3 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h3><p>重写<code>+defaultPropertyValues</code> 可以每次在对象创建之后为其提供默认值。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Book</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="keyword">float</span> price;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></div><div class="line">+ (<span class="built_in">NSDictionary</span> *)defaultPropertyValues &#123;</div><div class="line">    <span class="keyword">return</span> @&#123;<span class="string">@"price"</span> : @<span class="number">0</span>, <span class="string">@"title"</span>: <span class="string">@""</span>&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="主键-Primary-Keys"><a href="#主键-Primary-Keys" class="headerlink" title="主键(Primary Keys)"></a>主键(Primary Keys)</h3><p>重写 <code>+primaryKey</code> 可以设置模型的主键。声明主键之后，对象将允许进行查询，并且更新速度更加高效，而这也会要求每个对象保持唯一性。 一旦带有主键的对象被添加到 Realm 之后，该对象的主键将不可修改。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> <span class="keyword">id</span>;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line">+ (<span class="built_in">NSString</span> *)primaryKey &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">@"id"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><blockquote>
<p>对对象的所有更改（添加，修改和删除）都必须通过写入事务(transaction)完成。</p>
</blockquote>
<p>Realm 的对象可以被实例化并且作为<code>unmanaged</code>对象使用（也就是还未添加到 Realm 数据库中的对象），和其他常规Objective‑C对象无异。</p>
<p>如果您想要在多个线程中共享对象，或者在应用重启后重复使用对象，那么您必须将其添加到 Realm 数据库中——这个操作必须在写入事务中完成。</p>
<p>因为写入事务将会产生不可忽略的性能消耗，因此你应当检视你的代码以确保减少写入事务的次数。</p>
<p>由于写入事务像其余硬盘读写操作一样，会出现失败的情况，因此 <code>-[RLMRealm transactionWithBlock:]</code> 以及 <code>-[RLMRealm commitWriteTransaction]</code> 可以选择加上 NSError 指针参数 因此你可以处理和恢复诸如硬盘空间溢出之类的错误。此外，其他的错误都无法进行恢复。简单起见，我们的代码示例并不会处理这些错误，但是您应当在您应用当中注意到这些问题。</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>当定义完数据模型之后，您可以将您的 <code>RLMObject</code> 子类实例化，然后向 Realm 中添加新的实例。我们以下面这个简单的模型为例：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 狗狗的数据模型</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Dog</span> : <span class="title">RLMObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 实现文件</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Dog</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们可以用多种方法创建一个新的对象：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (1) 创建一个狗狗对象，然后设置其属性</span></div><div class="line">Dog *myDog = [[Dog alloc] init];</div><div class="line">myDog.name = <span class="string">@"大黄"</span>;</div><div class="line">myDog.age = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">// (2) 通过字典创建狗狗对象</span></div><div class="line">Dog *myOtherDog = [[Dog alloc] initWithValue:@&#123;<span class="string">@"name"</span> : <span class="string">@"豆豆"</span>, <span class="string">@"age"</span> : @<span class="number">3</span>&#125;];</div><div class="line"></div><div class="line"><span class="comment">// (3) 通过数组创建狗狗对象</span></div><div class="line">Dog *myThirdDog = [[Dog alloc] initWithValue:@[<span class="string">@"豆豆"</span>, @<span class="number">3</span>]];</div></pre></td></tr></table></figure>
<p>使用指定初始化器(designated initializer)创建对象是最简单的方式。请注意，所有的必需属性都必须在对象添加到 Realm 前被赋值。<br>通过使用恰当的键值，对象还可以通过字典完成创建。<br>最后，<code>RLMObject</code> 子类还可以通过数组完成实例化，数组中的值必须和数据模型中对应属性的次序相同。</p>
<h3 id="嵌套属性-Nested-Object"><a href="#嵌套属性-Nested-Object" class="headerlink" title="嵌套属性(Nested Object)"></a>嵌套属性(Nested Object)</h3><p>如果某个对象中有 <code>RLMObject</code> 或者 <code>RLMArray</code> 类型的属性，那么通过使用嵌套的数组或者字典便可以对这些属性递归地进行设置。您只需要简单的用表示其属性的字典或者数组替换每个对象即可：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里我们就可以使用已存在的狗狗对象来完成初始化</span></div><div class="line">Person *person1 = [[Person alloc] initWithValue:@[<span class="string">@"李四"</span>, @<span class="number">30</span>, @[aDog, anotherDog]]];</div><div class="line"></div><div class="line"><span class="comment">// 还可以使用多重嵌套</span></div><div class="line">Person *person2 = [[Person alloc] initWithValue:@[<span class="string">@"李四"</span>, @<span class="number">30</span>, @[@[<span class="string">@"小黑"</span>, @<span class="number">5</span>],</div><div class="line">                                                                 @[<span class="string">@"旺财"</span>, @<span class="number">6</span>]]]];</div></pre></td></tr></table></figure>
<p>即使是数组以及字典的多重嵌套，Realm 也能够轻松完成对象的创建。注意 <code>RLMArray</code> 只能够包含 <code>RLMObject</code> 类型，不能包含诸如<code>NSString</code>之类的基础类型。</p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>向 Realm 中添加数据的步骤如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建对象</span></div><div class="line">Person *author = [[Person alloc] init];</div><div class="line">author.name    = <span class="string">@"大卫·福斯特·华莱士"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 获取默认的 Realm 实例</span></div><div class="line">RLMRealm *realm = [RLMRealm defaultRealm];</div><div class="line"><span class="comment">// 每个线程只需要使用一次即可</span></div><div class="line"></div><div class="line"><span class="comment">// 通过事务将数据添加到 Realm 中</span></div><div class="line"></div><div class="line"><span class="comment">// 方式一：</span></div><div class="line">[realm beginWriteTransaction];</div><div class="line">[realm addObject:author];</div><div class="line">[realm commitWriteTransaction];</div><div class="line"></div><div class="line"><span class="comment">// 方式二：</span></div><div class="line">[realm transactionWithBlock:^&#123;</div><div class="line">	[realm addObject:author];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>等您将某个对象添加到 Realm 数据库之后，您可以继续使用它，并且您对其做的任何更改都会被保存（必须在一个写入事务当中完成）。当写入事务提交之后，使用相同 Realm 数据源的其他线程才能够对这个对象进行更改。</p>
<p>请注意，如果在进程中存在多个写入操作的话，那么单个写入操作将会阻塞其余的写入操作，并且还会锁定该操作所在的当前线程。</p>
<p>这个特性与其他持久化解决方案类似，我们建议您使用该方案常规的最佳做法：将写入操作转移到一个独立的线程中执行。</p>
<p>由于 Realm 采用了 MVCC 设计架构，读取操作 并不会 因为写入事务正在进行而受到影响。除非您需要立即使用多个线程来同时执行写入操作，不然您应当采用批量化的写入事务，而不是采用多次少量的写入事务。</p>
<p>查看<a href="https://realm.io/docs/objc/latest/api/Classes/RLMRealm#" target="_blank" rel="external">RLMRealm</a>和<a href="https://realm.io/docs/objc/latest/api/Classes/RLMObject#" target="_blank" rel="external">RLMObject</a>来获得更多内容。</p>
<p>未完待续。。。</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;以前了解过 Realm 这个第三方数据库操作，但是没有深入的了解。这两天有空花了点时间看了一下文档，这边根据文档摘抄记录一下，方便以后使用到可以查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS端" scheme="superdanny.link/categories/iOS%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="Realm" scheme="superdanny.link/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>重装 Mac 系统</title>
    <link href="superdanny.link/2017/02/05/Reinstall-the-MacOS/"/>
    <id>superdanny.link/2017/02/05/Reinstall-the-MacOS/</id>
    <published>2017-02-05T08:36:00.000Z</published>
    <updated>2017-06-08T05:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天公司从保险柜里面拿出两台笔记本让我修理下，顿时心里一万只小绵羊奔腾而过，我是搞开发的，不是修电脑的。。。但是没办法，谁叫我比较好说话，妥协了。。。</p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、安装Mac OS X系统的苹果电脑<br>2、重置出厂系统将会清空硬盘数据，需转移硬盘所有文件</p>
<h2 id="方式一：在线安装"><a href="#方式一：在线安装" class="headerlink" title="方式一：在线安装"></a>方式一：在线安装</h2><p>这种方式比较直接，通过联网下载系统包在线安装，不过下载安装时间取决于网速和硬件。</p>
<ol>
<li>重启Mac电脑时按住Command+R或Command+Option+R进入OS X实用工具，如果不行，则关闭电脑，同时按住Command+Option+R，然后开机，直到看到屏幕上出现一个地球才松开键盘上的键，需要注意的是，一些旧的机型不支持在线恢复；</li>
<li>点击第4个选项“磁盘工具”，继续；</li>
<li>选择硬盘，点击“抹掉”标签，格式选择“Mac OS扩展(日志式)”，输入硬盘名称“Macintosh HD”，点击“抹掉”；</li>
<li>点击“磁盘工具”—“退出磁盘工具”，点击“重新安装OS X”；</li>
<li>点击“继续”开始下载和安装，时间会比较长，需耐心等待；</li>
<li>选择硬盘，点击“安装”即可。</li>
</ol>
<p>以上就是通过恢复出厂设置的方式重装Mac OS X系统的方法，安装过程中全自动，无需点击任何按键，可以触碰触摸板查看进度。</p>
<h2 id="方式二：U盘安装"><a href="#方式二：U盘安装" class="headerlink" title="方式二：U盘安装"></a>方式二：U盘安装</h2><p>我比较喜欢这一种，因为系统版本可以自己制定，另外不依赖网络即可完成安装。</p>
<p>预先准备一支不小于8G的U盘，用磁盘工具按图示顺序操作，U盘名称为USB01，直到提示抹盘成功：<br><img src="http://wx1.sinaimg.cn/large/81f8a509gy1fcfpo7irhmj20mq0cmju6.jpg" alt=""></p>
<h3 id="用Apple官方推荐的-createinstallmedia-命令制作"><a href="#用Apple官方推荐的-createinstallmedia-命令制作" class="headerlink" title="用Apple官方推荐的 createinstallmedia 命令制作"></a>用Apple官方推荐的 createinstallmedia 命令制作</h3><p>条件：在 App Store 下载了Install OS X El Capitan.app，或者从其它途径（例如共享的网盘）得到了（一般是dmg镜像中的）app安装包，请按以下步骤操作：</p>
<p>1、打开终端，然后以下两种方法任选一种</p>
<blockquote>
<p>方法一：（适合小白）</p>
<p>前提：下载得到的原版安装包（中文系统中显示为安装 OS X El Capitan，文件名为Install OS X El Capitan.app）已经默认在应用程序文件夹内，且U盘命名为USB01。</p>
<p>直接将以下命令全部复制、粘贴到终端：</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/USB01 --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app --nointeraction</div></pre></td></tr></table></figure>
<p>命令解释：</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo  <span class="comment">#获取超级用户权限执行以下命令</span></div><div class="line">/Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia  <span class="comment">#指定运行路径为为/Applications/Install OS X El Capitan.app/Contents/Resources/中的createinstallmedia这个“创建安装媒体”的程序，路径的文件名中的空格前添加的反斜杠“\”是转义字符，以便将“文件名中的空格”和“命令行中的参数之间的空格”区别开来。</span></div><div class="line">--volume  <span class="comment">#该选项要求指定在哪个volume中创建安装媒体（安装U盘）</span></div><div class="line">/Volumes/USB01  <span class="comment">#你要创建的安装盘（U盘）的路径</span></div><div class="line">--applicationpath  <span class="comment">#该选项是要求指定写入到U盘的OS X系统安装包的路径</span></div><div class="line">/Applications/Install\ OS\ X\ El\ Capitan.app  <span class="comment">#所指定的要写入U盘的系统安装包在电脑中的路径</span></div><div class="line">--nointeraction   <span class="comment">#该选项表示运行程序 createinstallmedia 的过程中不交互。如果不用这个选项，可能会弹出一个提示，跟你说接下来要干什么，问你是否确定，确定就按y，然后回车继续。</span></div></pre></td></tr></table></figure>
<p>方法二：输入命令+手动拖入终端操作（明显比较繁琐，适合熟悉终端的高手）。</p>
<p>此法对安装包Install OS X El Capitan.app的路径和文件名、版本（只要是版本&gt;=10.9的OS X app安装包）没有限制，甚至安装包也可以在移动硬盘中；U盘也不一定要命名为USB01。</p>
<p>  过程：</p>
<p>（1）输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo空格</div></pre></td></tr></table></figure>
<p>（2）打开Finder，找到Install OS X El Capitan.app，定位到 Install OS X El Capitan.app(右键显示包内容)/Contents/Resources/createinstallmedia，将createinstallmedia拖入终端；<br>（3）接着输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--volume空格</div></pre></td></tr></table></figure>
<p>（4）接着将U盘拖入终端；<br>（5）接着输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--applicationpath空格</div></pre></td></tr></table></figure>
<p>（6）接着，将Install OS X El Capitan.app拖入终端；<br>（7）接着输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--nointeraction</div></pre></td></tr></table></figure>
<p>此时，终端中的命令类似于方法一，只是相关路径可能有所不同。</p>
</blockquote>
<p>2、回车。<br>3、输入当前系统密码（看起来没有反应，实际是密码不可见），回车。<br>4、等待十几~几十分钟（视硬件而定），直到出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Making disk bootable...</div><div class="line">Copying boot files...</div><div class="line">Copy complete.</div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>如图所示：<br><img src="http://wx4.sinaimg.cn/mw690/81f8a509gy1fcfpw2fszyj20wi0rwdlg.jpg" alt=""></p>
<p>安装U盘制作完成。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、重启需要重装系统的Mac电脑时按住Option进入启动盘选择界面<br>2、选择刚刚制作的U盘<br>3、这里需要注意，本人在重装的过程中出现了 <strong><code>OS X could not be installed on your computer. No packages were eligible for install.</code></strong> 错误提示。<br>经过查询，需要重置系统时间。具体步骤是：点击顶部菜单栏 Utilities-Terminal 进入终端界面，然后输入指令 <code>date {month}{day}{hour}{minute}{year}</code> 例如2017年02月05日17:40的指令是<code>date 0205174017</code><br>4、接下来就是根据提示安装，然后等待十几分钟安装完成。</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天公司从保险柜里面拿出两台笔记本让我修理下，顿时心里一万只小绵羊奔腾而过，我是搞开发的，不是修电脑的。。。但是没办法，谁叫我比较好说话，妥协了。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="Mac" scheme="superdanny.link/tags/Mac/"/>
    
      <category term="MacOS" scheme="superdanny.link/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>如何正确设置导航栏透明度</title>
    <link href="superdanny.link/2017/01/04/iOS-NavigationBar-Alpha/"/>
    <id>superdanny.link/2017/01/04/iOS-NavigationBar-Alpha/</id>
    <published>2017-01-04T15:12:00.000Z</published>
    <updated>2017-01-05T05:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>很多时候，希望导航栏能够透明，同时item不透明，看了网上的做法，参测不齐。这里作为过来人<del>自己走过的坑</del>有必要说说。</p>
<a id="more"></a>
<h2 id="需求一：希望导航栏一直透明，且item也透明"><a href="#需求一：希望导航栏一直透明，且item也透明" class="headerlink" title="需求一：希望导航栏一直透明，且item也透明"></a>需求一：希望导航栏一直透明，且item也透明</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">YES</span> animated:<span class="literal">NO</span>];</div></pre></td></tr></table></figure>
<h2 id="需求二：希望导航栏一直透明，item不透明"><a href="#需求二：希望导航栏一直透明，item不透明" class="headerlink" title="需求二：希望导航栏一直透明，item不透明"></a>需求二：希望导航栏一直透明，item不透明</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeAll</span>;</div><div class="line">    <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.shadowImage = [<span class="built_in">UIImage</span> new];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.translucent = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</div><div class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:RGBACOLOR(<span class="number">56.0</span>, <span class="number">25.0</span>, <span class="number">114.0</span>, <span class="number">1.0</span>)] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.shadowImage = [<span class="built_in">UIImage</span> imageWithColor:RGBACOLOR(<span class="number">56.0</span>, <span class="number">25.0</span>, <span class="number">114.0</span>, <span class="number">1.0</span>)];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.translucent = <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="需求三：希望导航栏随着UIScrollView-UITableView滑动变化颜色，且item不透明"><a href="#需求三：希望导航栏随着UIScrollView-UITableView滑动变化颜色，且item不透明" class="headerlink" title="需求三：希望导航栏随着UIScrollView/UITableView滑动变化颜色，且item不透明"></a>需求三：希望导航栏随着UIScrollView/UITableView滑动变化颜色，且item不透明</h2><p><img src="http://ww2.sinaimg.cn/large/81f8a509gw1fbfpgd29wlg206y0beqv5.gif" alt="效果图"></p>
<p>这里需要借助第三方<code>LTNavigationBar</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UINavigationBar+Awesome.h"</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeAll</span>;</div><div class="line">    <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.shadowImage = [<span class="built_in">UIImage</span> new];</div><div class="line">    <span class="keyword">self</span>.navigationController.navigationBar.translucent = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</div><div class="line">    [<span class="keyword">self</span>.navigationController.navigationBar lt_reset];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setNavigationColor:(<span class="built_in">CGFloat</span>)contentOffSet_y &#123;</div><div class="line">    <span class="keyword">if</span> (contentOffSet_y &gt;= <span class="number">-10.0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (contentOffSet_y &lt;= <span class="number">0</span>) &#123;</div><div class="line">            [<span class="keyword">self</span>.navigationController.navigationBar lt_setBackgroundColor:RGBACOLOR(<span class="number">56.0</span>, <span class="number">25.0</span>, <span class="number">114.0</span>, <span class="number">0.0</span>)];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (contentOffSet_y &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (contentOffSet_y &lt;= <span class="number">130.0</span>) &#123;</div><div class="line">                [<span class="keyword">self</span>.navigationController.navigationBar lt_setBackgroundColor:RGBACOLOR(<span class="number">56.0</span>, <span class="number">25.0</span>, <span class="number">114.0</span>, <span class="number">1.0</span> / <span class="number">130.0</span> * contentOffSet_y)];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                [<span class="keyword">self</span>.navigationController.navigationBar lt_setBackgroundColor:RGBACOLOR(<span class="number">56.0</span>, <span class="number">25.0</span>, <span class="number">114.0</span>, <span class="number">1.0</span>)];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setShadowImage:[<span class="built_in">UIImage</span> new]];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</div><div class="line">    [<span class="keyword">self</span> setNavigationColor:scrollView.contentOffset.y];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;很多时候，希望导航栏能够透明，同时item不透明，看了网上的做法，参测不齐。这里作为过来人&lt;del&gt;自己走过的坑&lt;/del&gt;有必要说说。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于Autolayout制作动画的坑</title>
    <link href="superdanny.link/2016/12/22/iOS-Autolayout-and-animation/"/>
    <id>superdanny.link/2016/12/22/iOS-Autolayout-and-animation/</id>
    <published>2016-12-22T15:13:00.000Z</published>
    <updated>2016-12-22T15:16:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一直以来iOS的 Autolayout 都是一个很不错的功能，结合第三方 Masonry 可以节省很多工作成本。但是如果使用 Autolayout 来制作动画，那么就需要注意一下。不然就会像我一样，遇坑踩坑，越陷越深。</p>
<a id="more"></a>
<h2 id="使用xib实现动画"><a href="#使用xib实现动画" class="headerlink" title="使用xib实现动画"></a>使用xib实现动画</h2><p>使用情景：自定义一个UIView <code>ViewA</code>，实现由下往上弹窗效果。</p>
<p>效果如下<br><img src="http://ww1.sinaimg.cn/large/81f8a509gw1fazxgypjh2g207r0dt77f.gif" alt="效果图"></p>
<p>假如我们是使用xib创建自定义弹窗视图，一般我们都会在xib上做好了约束的条件，之后在.m文件里面实现视图的初始化操作。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/81f8a509gw1fazynz97n0j20dw07tt92.jpg" alt="自定义UIView"></p>
<p>实现动画的原则是，在<code>ViewA</code>执行动画之前，需要将<code>ViewA</code>最终约束条件设置好，之后在执行动画代码块里面只需要调用<code>layoutIfNeeded</code>即可。</p>
<p>另外调用<code>layoutIfNeeded</code>方法的对象必须是<code>ViewA</code>的父视图，不然会出现<code>ViewA</code>的子视图跟着执行动画的情况。</p>
<p>如下面的代码中，<code>ViewA</code>的父视图就是<code>window</code>，所以调用<code>layoutIfNeeded</code>方法的对象是<code>window</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [[[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"DDJoinView"</span> owner:<span class="keyword">self</span> options:<span class="literal">nil</span>] lastObject];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, kScreenHeight, kScreenWidth, <span class="number">195</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)show &#123;</div><div class="line">    <span class="built_in">UIWindow</span> *window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</div><div class="line">    _bgView = [[<span class="built_in">UIButton</span> alloc] init];</div><div class="line">    _bgView.backgroundColor = <span class="built_in">UIColorHex</span>(<span class="number">0x000000</span>);</div><div class="line">    _bgView.alpha = <span class="number">0.25</span>;</div><div class="line">    _bgView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kScreenWidth, kScreenHeight);</div><div class="line">    [_bgView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(close:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    [window addSubview:_bgView];</div><div class="line">    [window addSubview:<span class="keyword">self</span>];</div><div class="line">    [<span class="keyword">self</span> mas_updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        (<span class="keyword">void</span>)make.left;</div><div class="line">        (<span class="keyword">void</span>)make.centerX;</div><div class="line">        make.height.offset(<span class="number">195</span>);</div><div class="line">        make.bottom.offset(<span class="number">0</span>);</div><div class="line">    &#125;];</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span>f animations:^&#123;</div><div class="line">        [window layoutIfNeeded];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"><span class="meta">#pragma mark - 關閉</span></div><div class="line">- (<span class="keyword">void</span>)close:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">UIWindow</span> *window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</div><div class="line">    [<span class="keyword">self</span> mas_updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        (<span class="keyword">void</span>)make.left;</div><div class="line">        (<span class="keyword">void</span>)make.centerX;</div><div class="line">        make.height.offset(<span class="number">195</span>);</div><div class="line">        make.bottom.offset(<span class="number">195</span>);</div><div class="line">    &#125;];</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span>f animations:^&#123;</div><div class="line">        [window layoutIfNeeded];</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">UIView</span> *v <span class="keyword">in</span> [<span class="keyword">self</span> subviews]) &#123;</div><div class="line">            [v removeFromSuperview];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> removeFromSuperview];</div><div class="line">        [_bgView removeFromSuperview];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...</span></div><div class="line"><span class="comment">//执行下面动画前，设置自定义view的最终位置的约束条件</span></div><div class="line"><span class="comment">//...</span></div><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span>f animations:^&#123;</div><div class="line">        [xxx layoutIfNeeded];</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;一直以来iOS的 Autolayout 都是一个很不错的功能，结合第三方 Masonry 可以节省很多工作成本。但是如果使用 Autolayout 来制作动画，那么就需要注意一下。不然就会像我一样，遇坑踩坑，越陷越深。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="Autolayout" scheme="superdanny.link/tags/Autolayout/"/>
    
      <category term="动画" scheme="superdanny.link/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>NSDecimalNumber实现金融类等高精度计算(转改)</title>
    <link href="superdanny.link/2016/12/14/iOS-High-precision-calculation/"/>
    <id>superdanny.link/2016/12/14/iOS-High-precision-calculation/</id>
    <published>2016-12-14T09:43:00.000Z</published>
    <updated>2017-04-27T09:35:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>平时我们进行数值计算时，使用常用的数据类型进行加减乘除是不会有什么问题的，但是一旦涉及精度高的，特别是计算金额时，就特别容易踩坑，本人就经历过两次，回想起来血淋淋的场面依然历历在目。</p>
<p>苹果其实很早就推出过计算高精度类型的API。只不过我没发现。感觉自己还是<code>too young too simple</code>。话不多说，直奔主题。</p>
<a id="more"></a>
<p>本文转载至<a href="http://www.skyfox.org/" target="_blank" rel="external">天狐博客</a></p>
<h2 id="NSDecimalNumber"><a href="#NSDecimalNumber" class="headerlink" title="NSDecimalNumber"></a>NSDecimalNumber</h2><p>NSDecimalNumber,不可变NSNumber 的子类,提供了一个面向对象的十进制运算包装器 。实例可以代表任意数值,表示为(mantissa)尾数x 10 ^(exponent)指数,(mantissa)尾数是一个十进制整数到38位长,(exponent)指数是一个整数从-128年到127。</p>
<p><img src="http://ww4.sinaimg.cn/large/81f8a509gw1faqhzrjguwj20be03cjrd.jpg" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Mantissa</td>
<td style="text-align:center">十进制整数</td>
</tr>
<tr>
<td style="text-align:center">Exponent</td>
<td style="text-align:center">小数位数</td>
</tr>
<tr>
<td style="text-align:center">Flag(Sign)</td>
<td style="text-align:center">是否为负数</td>
</tr>
</tbody>
</table>
<h3 id="创建Decimal-Number"><a href="#创建Decimal-Number" class="headerlink" title="创建Decimal Number"></a>创建Decimal Number</h3><p><strong>+ (NSDecimalNumber *)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag</strong></p>
<p>参数表示 一个number的科学记数法 ,要求(mantissa)尾数是一个整数。例如,如果表示的数是-12.345,它是表示为12345 x10 ^ 3   -mantissa 是12345;(exponent)指数是3;和isNegative(一个布尔值,用于指定number 的(sign)符号是负的)是YES,如下例所示。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDecimalNumber</span> *number = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithMantissa:<span class="number">12345</span></div><div class="line">                                                            exponent:<span class="number">-3</span></div><div class="line">                                                          isNegative:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
<p><strong>+ (NSDecimalNumber *)decimalNumberWithDecimal:(NSDecimal)decimal</strong></p>
<p>给定一个NSDecimal数据结构,创建并返回一个等价的 NSDecimalNumber对象</p>
<p><strong>+ (NSDecimalNumber <em>)decimalNumberWithString:(NSString </em>)numericString</strong></p>
<p>创建并返回一个NSDecimalNumber对象值相当于个给定的数字字符串。</p>
<p>numericString:除了数字字符串,numericString可以包括一个“+”或“-”,一个“E”或“E”,用科学记数法表示一个数的指数,和一个NSLocaleDecimalSeparator划分的部分数的有效组成部分。</p>
<p><strong>+ (NSDecimalNumber <em>)decimalNumberWithString:(NSString </em>)numericString  locale:(id)locale</strong></p>
<p>locale:一个字典定义语言环境(特别是NSLocaleDecimalSeparator),在进行解析numericString的时候</p>
<p>numericString:除了数字字符串,numericString可以包括一个“+”或“-”,一个“E”或“E”,用科学记数法表示一个数的指数,和一个NSLocaleDecimalSeparator划分的部分数的有效组成部分。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以","当做分隔符格式</span></div><div class="line"><span class="built_in">NSDictionary</span> *locale = @&#123;<span class="built_in">NSLocaleDecimalSeparator</span> :<span class="string">@","</span>];</div><div class="line"><span class="comment">//123.4</span></div><div class="line"><span class="built_in">NSDecimalNumber</span> *discountAmount = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:<span class="string">@"123,40"</span> locale:locale];</div></pre></td></tr></table></figure>
<p>以下是numericString的一些正确示例:</p>
<pre><code>“2500.6” (or “2500,6”, 取决于 locale)
“–2500.6” (or “–2500,6”)
“–2.5006e3” (or “–2,5006e3”)
“–2.5006E3” (or “–2,5006E3”)
</code></pre><p>以下是numericString的一些错误示例:</p>
<pre><code>“2,500.6”
“2500 3/5”
“2.5006x10e3”
“two thousand five hundred and six tenths”
</code></pre><p><strong>+ (NSDecimalNumber *)one</strong></p>
<p>一个 等同于 1.0的NSDecimalNumber对象</p>
<p><strong>+ (NSDecimalNumber *)zero</strong></p>
<p>一个 等同于 0.0的NSDecimalNumber对象</p>
<p><strong>+ (NSDecimalNumber *)notANumber</strong></p>
<p>没有指定数值的NSDecimalNumber对象</p>
<p>常用于对比，比如：[[NSDecimalNumber notANumber] isEqualToNumber:myNumber];</p>
<h3 id="初始化Decimal-Number"><a href="#初始化Decimal-Number" class="headerlink" title="初始化Decimal Number"></a>初始化Decimal Number</h3><p><strong>- (instancetype)initWithDecimal:(NSDecimal)decimal</strong></p>
<p>一个NSDecimalNumber使用给定decimal对象初始化</p>
<p><strong>- (instancetype)initWithMantissa:(unsigned long long)mantissa  exponent:(short)exponent  isNegative:(BOOL)flag</strong></p>
<p>使用(mantissa)尾数, (exponent)指数 number 的(sign)符号,来初始化NSDecimalNumber</p>
<p><strong>- (instancetype)initWithString:(NSString *)numericString</strong></p>
<p>创建并返回一个NSDecimalNumber对象值相当于个给定的numericString数字字符串。</p>
<p>numericString:除了数字字符串,numericString可以包括一个“+”或“-”,一个“E”或“E”,用科学记数法表示一个数的指数,和一个NSLocaleDecimalSeparator划分的部分数的有效组成部分。</p>
<p><strong>- (instancetype)initWithString:(NSString *)numericString  locale:(id)locale</strong></p>
<p>以numericString,locale初始化NSDecimalNumber对象</p>
<p>locale:一个字典定义语言环境(特别是NSLocaleDecimalSeparator),在进行解析numericString的时候</p>
<p>numericString:除了数字字符串,numericString可以包括一个“+”或“-”,一个“E”或“E”,用科学记数法表示一个数的指数,和一个NSLocaleDecimalSeparator划分的部分数的有效组成部分。</p>
<h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><p><strong>- (NSDecimalNumber <em>)decimalNumberByAdding:(NSDecimalNumber </em>)decimalNumber</strong></p>
<p>返回一个新的NSDecimalNumber对象, 值 是接收方与另一个给定NSDecimalNumber对象的总和。</p>
<p><strong>- (NSDecimalNumber <em>)decimalNumberByAdding:(NSDecimalNumber </em>)decimalNumber withBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>加上decimalNumber给接受者并返回一个新创建的NSDecimalNumber对象。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h3><p><strong>- (NSDecimalNumber <em>)decimalNumberBySubtracting:(NSDecimalNumber </em>)decimalNumber</strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者减去另一个给定NSDecimalNumber对象的值。</p>
<p><strong>- (NSDecimalNumber <em>)decimalNumberBySubtracting:(NSDecimalNumber </em>)decimalNumber withBehavior:(id<nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者减去另一个给定NSDecimalNumber对象的值。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><p><strong>- (NSDecimalNumber <em>)decimalNumberByMultiplyingBy:(NSDecimalNumber </em>)decimalNumber</strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者乘以另一个给定NSDecimalNumber对象的值。</p>
<p><strong>- (NSDecimalNumber <em>)decimalNumberByMultiplyingBy:(NSDecimalNumber </em>)decimalNumber withBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者乘以另一个给定NSDecimalNumber对象的值。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><p><strong>- (NSDecimalNumber <em>)decimalNumberByDividingBy:(NSDecimalNumber </em>)decimalNumber</strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者除以另一个给定NSDecimalNumber对象的值。</p>
<p><strong>- (NSDecimalNumber <em>)decimalNumberByDividingBy:(NSDecimalNumber </em>)decimalNumber withBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者除以另一个给定NSDecimalNumber对象的值。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="a的N次方"><a href="#a的N次方" class="headerlink" title="a的N次方"></a>a的N次方</h3><p><strong>- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power</strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者 的power次方。</p>
<p><strong>- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者 的power次方。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h3><p><strong>- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power</strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者乘以10的power次方。</p>
<p><strong>- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者乘以10的power次方。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><p><strong>- (NSDecimalNumber *)decimalNumberByRoundingAccordingToBehavior:(nullable id <nsdecimalnumberbehaviors>)behavior</nsdecimalnumberbehaviors></strong></p>
<p>返回一个新的NSDecimalNumber对象,其值是调用者四舍五入过后的值。</p>
<p>behavior:指定的如何处理计算错误和舍入行为。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDecimalNumberHandler</span> * handler =</div><div class="line">[[<span class="built_in">NSDecimalNumberHandler</span> alloc] initWithRoundingMode:<span class="built_in">NSRoundPlain</span></div><div class="line">                                               scale:scale</div><div class="line">                                    raiseOnExactness:<span class="literal">NO</span></div><div class="line">                                     raiseOnOverflow:<span class="literal">YES</span></div><div class="line">                                    raiseOnUnderflow:<span class="literal">YES</span></div><div class="line">                                 raiseOnDivideByZero:<span class="literal">YES</span>];</div><div class="line"><span class="built_in">NSDecimalNumber</span> *result = [number decimalNumberByRoundingAccordingToBehavior:handler];</div></pre></td></tr></table></figure>
<p>描述不同的舍入方式,查看NSDecimalNumberBehaviors协议规范的roundingMode方法。</p>
<p><strong>roundingMode四舍五入策略</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Original</span></div><div class="line"><span class="comment">//    value 1.2  1.21  1.25  1.35  1.27</span></div><div class="line"></div><div class="line"><span class="comment">// NSRoundPlain    1.2  1.2   1.3   1.4   1.3</span></div><div class="line"><span class="comment">// NSRoundDown     1.2  1.2   1.2   1.3   1.2</span></div><div class="line"><span class="comment">// NSRoundUp       1.2  1.3   1.3   1.4   1.3</span></div><div class="line"><span class="comment">// NSRoundBankers  1.2  1.2   1.2   1.4   1.3</span></div></pre></td></tr></table></figure>
<h3 id="访问值"><a href="#访问值" class="headerlink" title="访问值"></a>访问值</h3><p><strong>@property(readonly) NSDecimal decimalValue</strong></p>
<p>十进制数最近似的double值。(只读)</p>
<p><strong>- (NSString *)descriptionWithLocale:(id)locale</strong></p>
<p>根据给定的locale返回number的字符串</p>
<p><strong>@property(readonly) const char *objCType</strong></p>
<p>Objective- C的C字符串类型的数据,包含小数对象。(只读)</p>
<h3 id="管理-Behavior"><a href="#管理-Behavior" class="headerlink" title="管理 Behavior"></a>管理 Behavior</h3><p><strong>+ (id<nsdecimalnumberbehaviors>)defaultBehavior</nsdecimalnumberbehaviors></strong></p>
<p>返回的算术的方法、像decimalNumberByAdding:四舍五入和处理错误的条件。默认情况下,算术方法使用NSRoundPlain行为;也就是说,四舍五入最可能的返回值的方法。方法假定你需要精度不超过38个有效数字,当他们试图除以0或产生一个数表示太大或太小的时候发生异常。</p>
<p>如果这种默认行为不适合您的应用程序,您应该使用这个方法,让您可以指定行为,像decimalNumberByAdding:withBehavior:。如果你发现自己一直使用一个特定的行为,您可以指定一个不同的默认行为setDefaultBehavior:。</p>
<p>在你的应用程序中默认行为是单独为每个线程维护。</p>
<h3 id="比较-Decimal-Numbers"><a href="#比较-Decimal-Numbers" class="headerlink" title="比较 Decimal Numbers"></a>比较 Decimal Numbers</h3><p><strong>- (NSComparisonResult)compare:(NSNumber *)decimalNumber</strong></p>
<p>返回一个NSComparisonResult值表明调用者和另一个给定的数字NSDecimalNumber对象的顺序大小。</p>
<p>NSOrderedAscending 如果decimalNumber的价值大于调用者;</p>
<p>NSOrderedSame 如果它们相等;</p>
<p>NSOrderedDescending 如果decimalNumber小于调用者的值。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDecimalNumber</span> *discount1 = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:<span class="string">@"1.2"</span>];</div><div class="line"><span class="built_in">NSDecimalNumber</span> *discount2 = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:<span class="string">@"1.3"</span>];</div><div class="line"><span class="built_in">NSComparisonResult</span> result = [discount1 compare:discount2];</div><div class="line"><span class="keyword">if</span> (result == <span class="built_in">NSOrderedAscending</span>) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"1.2 &lt; 1.3"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="built_in">NSOrderedSame</span>) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"1.2 == 1.3"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="built_in">NSOrderedDescending</span>) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"1.2 &gt; 1.3"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取-最大最小可能值"><a href="#获取-最大最小可能值" class="headerlink" title="获取 最大最小可能值"></a>获取 最大最小可能值</h3><p><strong>+ (NSDecimalNumber *)maximumDecimalNumber</strong></p>
<p>返回一个NSDecimalNumber对象的最大可能值。</p>
<p><strong>+ (NSDecimalNumber *)minimumDecimalNumber</strong></p>
<p>返回一个NSDecimalNumber对象的最小可能值。</p>
<h3 id="常量-Constants"><a href="#常量-Constants" class="headerlink" title="常量 Constants"></a>常量 Constants</h3><p><strong>NSDecimalNumber 异常名称</strong></p>
<p>列出了各种异常的名字 表明NSDecimalNumber计算错误。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="built_in">NSDecimalNumberExactnessException</span>; <span class="comment">//如果出现一个精确的错误</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="built_in">NSDecimalNumberOverflowException</span>; <span class="comment">// 溢出</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="built_in">NSDecimalNumberUnderflowException</span>; <span class="comment">//下溢</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="built_in">NSDecimalNumberDivideByZeroException</span>; <span class="comment">//除数为0</span></div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;平时我们进行数值计算时，使用常用的数据类型进行加减乘除是不会有什么问题的，但是一旦涉及精度高的，特别是计算金额时，就特别容易踩坑，本人就经历过两次，回想起来血淋淋的场面依然历历在目。&lt;/p&gt;
&lt;p&gt;苹果其实很早就推出过计算高精度类型的API。只不过我没发现。感觉自己还是&lt;code&gt;too young too simple&lt;/code&gt;。话不多说，直奔主题。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="金额计算" scheme="superdanny.link/tags/%E9%87%91%E9%A2%9D%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods之repo换源和gem换源</title>
    <link href="superdanny.link/2016/12/04/CocoaPods-update-gem-and-repo/"/>
    <id>superdanny.link/2016/12/04/CocoaPods-update-gem-and-repo/</id>
    <published>2016-12-04T07:21:00.000Z</published>
    <updated>2017-06-08T05:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于淘宝gem源维护困难，所以已经不再维护。目前已经有了替代方案。</p>
<h2 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h2><p>之前的<a href="/2014/12/16/CocoaPods/">CocoaPods安装过程</a>已经提及过，这里就不再累赘。</p>
<a id="more"></a>
<h2 id="gem换源"><a href="#gem换源" class="headerlink" title="gem换源"></a>gem换源</h2><p>请尽可能用比较新的 RubyGems 版本，建议 2.6.x 以上。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem update --system <span class="comment"># 这里请翻墙一下</span></div><div class="line">gem -v</div><div class="line">2.6.6</div></pre></td></tr></table></figure>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gem sources --add https://gems.ruby-china.org/ --remove http://ruby.taobao.org/</div><div class="line">gem sources <span class="_">-l</span></div><div class="line">https://gems.ruby-china.org</div><div class="line"><span class="comment"># 确保只有 gems.ruby-china.org</span></div></pre></td></tr></table></figure>
<h2 id="pod-repo换源"><a href="#pod-repo换源" class="headerlink" title="pod repo换源"></a>pod repo换源</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo</div></pre></td></tr></table></figure>
<p>会出现以下的字眼（本人以前有多个源，后来全部去掉了。自己直接使用的官方源）</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">artsy</div><div class="line">- Type: git (master)</div><div class="line">- URL:  https://github.com/Artsy/Specs.git</div><div class="line">- Path: /Users/superdanny/.cocoapods/repos/artsy</div><div class="line"></div><div class="line">getuilaboratory</div><div class="line">- Type: git (master)</div><div class="line">- URL:  https://github.com/GetuiLaboratory/Specs.git</div><div class="line">- Path: /Users/superdanny/.cocoapods/repos/getuilaboratory</div><div class="line"></div><div class="line">master</div><div class="line">- Type: git (master)</div><div class="line">- URL:  https://github.com/CocoaPods/Specs.git</div><div class="line">- Path: /Users/superdanny/.cocoapods/repos/master</div><div class="line"></div><div class="line">3 repos</div></pre></td></tr></table></figure>
<p>如果有出现跟我一样的多个源时，可以删除不需要的源</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod repo remove 源的名字</div><div class="line"><span class="comment"># 比如我上面的‘getuilaboratory’、‘artsy’等</span></div><div class="line">pod repo remove artsy</div></pre></td></tr></table></figure>
<p>接下来就是更换源</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod repo remove master</div><div class="line">pod repo add master https://gitcafe.com/akuandev/Specs.git</div><div class="line">pod repo update</div></pre></td></tr></table></figure>
<h2 id="Cocoapods使用技巧"><a href="#Cocoapods使用技巧" class="headerlink" title="Cocoapods使用技巧"></a>Cocoapods使用技巧</h2><p>每次我们执行<code>pod install</code>、<code>pod update</code>时都会更新整个specs库，这样非常费时，所以想在不更新specs库的前提下安装三方库。</p>
<p>只有当觉得specs库太旧了之后或者specs库里面找不到某个三方库时才进行更新specs库。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod install --verbose --no-repo-update</div><div class="line">pod update --verbose --no-repo-update</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于淘宝gem源维护困难，所以已经不再维护。目前已经有了替代方案。&lt;/p&gt;
&lt;h2 id=&quot;安装CocoaPods&quot;&gt;&lt;a href=&quot;#安装CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;安装CocoaPods&quot;&gt;&lt;/a&gt;安装CocoaPods&lt;/h2&gt;&lt;p&gt;之前的&lt;a href=&quot;/2014/12/16/CocoaPods/&quot;&gt;CocoaPods安装过程&lt;/a&gt;已经提及过，这里就不再累赘。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="终端" scheme="superdanny.link/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="CocoaPods" scheme="superdanny.link/tags/CocoaPods/"/>
    
      <category term="Gem" scheme="superdanny.link/tags/Gem/"/>
    
  </entry>
  
  <entry>
    <title>2016，我的年终总结-写给自己的一封信</title>
    <link href="superdanny.link/2016/11/26/2016-Year-end-summary/"/>
    <id>superdanny.link/2016/11/26/2016-Year-end-summary/</id>
    <published>2016-11-26T11:49:00.000Z</published>
    <updated>2016-11-30T01:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年已经是我第二个年头写总结了，相比去年的工作总结，今年的总结，我侧重说说自己一年来的感悟，工作上的事情会涉及比较少。</p>
<a id="more"></a>
<h2 id="能力与责任"><a href="#能力与责任" class="headerlink" title="能力与责任"></a>能力与责任</h2><p>不知不觉，已经在公司呆了快2年，公司的事业也一步步走向正轨，回想起当初兴致勃勃的来到公司时，对比起现在多了几分愁容（愁在买房），少了几分幼稚。我想，这应该是每个人都会经历的事情。随着年龄的增长，考虑的事情也就越来越多，压力也就慢慢随着增大，随之而来的就有可能是这几种结果：</p>
<blockquote>
<p>1、身心疲惫，几近瓦解；<br>2、事业有成，踌躇满志；<br>3、平平淡淡，得过且过；</p>
</blockquote>
<p>我想，每个人都应该很清楚自己目前的状态。但是，不管是好是坏，只要能够认清自己，明确目标，始终不放弃，我想，再落寞也能够“拨开云雾见青天”。我这个人有一个缺点，就是心态时好时坏，但是我有一个不认输的心。因为我会考虑后果，所以很多事情我都会考虑到后果，哪些应该做，哪些不应该做。当然我不是做的最好，但是我一直在努力。</p>
<h2 id="低调做事有度，切勿自大"><a href="#低调做事有度，切勿自大" class="headerlink" title="低调做事有度，切勿自大"></a>低调做事有度，切勿自大</h2><p>自打我踏出社会之后，很多事情看破了，也看淡了许多。看待事情的态度也就不会像当初那样较真。年轻那会好胜心强（好像把自己说老了…），什么事情都喜欢较真，一定要分出一个是非对错，孰高孰低，孰优孰略。即便最后自己胜利了，满足了自己的好胜心，结果也只会两败俱伤，吃力不讨好。所以凡事都要有个“度”，既要大度、有度量，又要适可而止，别太较真。回想起以往自己的性格，就是过于较真，所以很多时候总是吃力不讨好。现在想想觉得实在是太幼稚了(৹ᵒ̴̶̷᷄﹏ᵒ̴̶̷᷅৹)。</p>
<p>另外自大是一个人最致命的弱点，不懂得谦虚的人是成不了大器的，因为这样只会让别人疏远你。梁启超说过，“自信与骄傲有异；自信者常沉着，而骄傲者常浮扬。”。我们每一个人都有自己的弱点，学会隐藏自己的弱点何尝不是一件好事。但是缺点就不一样，我们应该是改掉缺点，而不是将其藏埋于心。一个人之所以能够很出色，很成功，绝大部分原因是这个人能够看清自己的缺点，学习别人的优点，从而弥补自己的不足。正所谓“金无足赤，人无完人”。</p>
<p>好了，上面扯了一大堆大道理，我只是想表达自己这一年来的感慨以及自己以往幼稚的性格与心态。希望通过总结，反思自己。</p>
<h2 id="买房风波"><a href="#买房风波" class="headerlink" title="买房风波"></a>买房风波</h2><p>中国有一个很明显的特色，就是每个人到了一定年龄都会操心买房。我也不例外，我今年因为买房的事情可以说是操碎了心，身心疲惫，几近崩溃。不过从那以后我也更加认清自己，凡事都不能太过急于求成。至于中间发生了什么就不多说了。此处省略一万个字…</p>
<h2 id="健康为本"><a href="#健康为本" class="headerlink" title="健康为本"></a>健康为本</h2><p>俗话说得好，身体是革命的本钱。人再有钱，身体垮了，再多钱也无福消受。尤其是干我们 IT 这一行的更应该清楚的认识到，并且把它看做是第一位。今年我就不再发自己的自拍照，因为我太胖了，身体大不如去年，所以在最近的这段时间，我开始锻炼身体，不想因为由于工作的缘故而把自己的身体搞出毛病。今年我看过最多的就是“某某公司某某员工猝死”之类的新闻，想想都觉得不寒而栗。父母辛辛苦苦把我们养大，不是想看到这种结果。身体是自己的，我希望每个人都应该认真看待。</p>
<h2 id="未来道路"><a href="#未来道路" class="headerlink" title="未来道路"></a>未来道路</h2><p>2016这一年来，我的能力提升相比去年步调慢下来了，由于种种因素使得我放慢步调，开始思考接下来的人生道路。随着 IT 时代的发展，社会竞争也越来越激烈。以往的技术已经无法再满足需求，企业对新技术新领域的开拓也就越来越强烈，一个人只懂得一门技术已经完全不能满足当前社会的需要。所以职业的发展道路方向的选择也就变得复杂多。是一直平淡无奇的当着一个小码农？还是从技术转管理？亦或者是横向发展？每个人的选择都不同。我的方向一直是明确的，但是要想实现当初的目标，我发现不单单只会一门技术就行，唯有横向发展之后，了解了不同技术领域，之后方可纵观全局，处理问题时才不至于过于片面。</p>
<p>2016已经接近尾声，即将迎来的是崭新的2017。我希望经过2016这一年的经历与感悟之后，能够给我的2017带来帮助。我也希望能够更加的接近我的目标，一步一个脚印的朝着我的目标前进。不管前路多坎坷，目标也不能有一丝的动摇。</p>
<p>希望自己不要只是纸上谈兵。还是应该付诸行动，“少壮不努力，老来被唾弃”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年已经是我第二个年头写总结了，相比去年的工作总结，今年的总结，我侧重说说自己一年来的感悟，工作上的事情会涉及比较少。&lt;/p&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="superdanny.link/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Xcode8，你为什么这么坑</title>
    <link href="superdanny.link/2016/09/26/Xcode8-pit/"/>
    <id>superdanny.link/2016/09/26/Xcode8-pit/</id>
    <published>2016-09-26T08:02:00.000Z</published>
    <updated>2017-02-17T07:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开启吐槽模式"><a href="#开启吐槽模式" class="headerlink" title="开启吐槽模式"></a>开启吐槽模式</h3><p>为了迎合Xcode8所带来的更新，我是惊喜万分(<del>奔溃至极</del>)。丝毫不敢怠慢，生怕跟不上入坑的队伍😂</p>
<a id="more"></a>
<h3 id="坑一：storyboard或xib部分图片真机显示不了"><a href="#坑一：storyboard或xib部分图片真机显示不了" class="headerlink" title="坑一：storyboard或xib部分图片真机显示不了"></a>坑一：storyboard或xib部分图片真机显示不了</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="comment">//加上这句</span></div><div class="line">    [<span class="keyword">self</span> layoutIfNeeded];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="坑二：打包之后无法在开发者中间看到新构建的版本（或iOS10访问相机、相册等闪退）"><a href="#坑二：打包之后无法在开发者中间看到新构建的版本（或iOS10访问相机、相册等闪退）" class="headerlink" title="坑二：打包之后无法在开发者中间看到新构建的版本（或iOS10访问相机、相册等闪退）"></a>坑二：打包之后无法在开发者中间看到新构建的版本（或iOS10访问相机、相册等闪退）</h3><p>原因是iOS10为了保护隐私，需要在 info.plist 里添加配置，包括定位、摄像头、麦克风、相册、相机等等。</p>
<p><img src="http://ww2.sinaimg.cn/large/81f8a509jw1f872ym5e4yj20wu05cjtu.jpg" alt="plist文件"></p>
<p>访问权限一览表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 通讯录 --&gt; </div><div class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问通讯录&lt;/string&gt; </div><div class="line">&lt;!-- 相册 --&gt; </div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问相册&lt;/string&gt; </div><div class="line">&lt;!-- 相机 --&gt; </div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问相机&lt;/string&gt; </div><div class="line">&lt;!-- 麦克风 --&gt; </div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问麦克风&lt;/string&gt; </div><div class="line">&lt;!-- 位置 --&gt; </div><div class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问位置&lt;/string&gt; </div><div class="line">&lt;!-- 在使用期间访问位置 --&gt; </div><div class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能在使用期间访问位置&lt;/string&gt; </div><div class="line">&lt;!-- 始终访问位置 --&gt; </div><div class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能始终访问位置&lt;/string&gt; </div><div class="line">&lt;!-- 日历 --&gt; </div><div class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问日历&lt;/string&gt; </div><div class="line">&lt;!-- 提醒事项 --&gt; </div><div class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问提醒事项&lt;/string&gt; </div><div class="line">&lt;!-- 运动与健身 --&gt; </div><div class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问运动与健身&lt;/string&gt; </div><div class="line">&lt;!-- 健康更新 --&gt; </div><div class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问健康更新 &lt;/string&gt; </div><div class="line">&lt;!-- 健康分享 --&gt; </div><div class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问健康分享&lt;/string&gt; </div><div class="line">&lt;!-- 蓝牙 --&gt; </div><div class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问蓝牙&lt;/string&gt; </div><div class="line">&lt;!-- 媒体资料库 --&gt; </div><div class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt; </div><div class="line">&lt;string&gt;App需要您的同意,才能访问媒体资料库&lt;/string&gt;</div></pre></td></tr></table></figure>
<p>如果不起作用,可以请求后台权限,类似于这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;UIBackgroundModes&lt;/key&gt;</div><div class="line">&lt;array&gt; </div><div class="line">&lt;!-- 在这里写上你在后台模式下要使用权限对应的key --&gt; </div><div class="line">&lt;string&gt;location&lt;/string&gt;</div><div class="line">...</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure></p>
<p>或者在Xcode里选中当前的target，选择 Capabilities ，找到 Background Modes ，打开它，在里面选择对应权限</p>
<p><img src="http://ww4.sinaimg.cn/large/81f8a509gw1fa8xpyded7j21h80z810j.jpg" alt="Background Modes"></p>
<h3 id="坑三：控制面板输出不完整"><a href="#坑三：控制面板输出不完整" class="headerlink" title="坑三：控制面板输出不完整"></a>坑三：控制面板输出不完整</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define NSLog(format, ...) printf(<span class="meta-string">"\n[%s] %s [第%d行] %s\n"</span>, __TIME__, __FUNCTION__, __LINE__, [[NSString stringWithFormat:format, ## __VA_ARGS__] UTF8String]);</span></div></pre></td></tr></table></figure>
<h3 id="坑四：NSUserDefaults问题"><a href="#坑四：NSUserDefaults问题" class="headerlink" title="坑四：NSUserDefaults问题"></a>坑四：NSUserDefaults问题</h3><p><a href="http://stackoverflow.com/a/37841106/6099367" target="_blank" rel="external">NSUserDefaults问题</a></p>
<h3 id="坑五：插件无法使用问题"><a href="#坑五：插件无法使用问题" class="headerlink" title="坑五：插件无法使用问题"></a>坑五：插件无法使用问题</h3><p><a href="http://superdanny.link/2016/09/16/How-to-use-Xcode8-or-iOS10_SDK/">如何优雅的使用Xcode8或iOS10 SDK</a></p>
<h3 id="坑六：Xcode8之xib"><a href="#坑六：Xcode8之xib" class="headerlink" title="坑六：Xcode8之xib"></a>坑六：Xcode8之xib</h3><h4 id="Xcode8-打开Xib之后，Xcode7-无法打开"><a href="#Xcode8-打开Xib之后，Xcode7-无法打开" class="headerlink" title="Xcode8 打开Xib之后，Xcode7 无法打开"></a>Xcode8 打开Xib之后，Xcode7 无法打开</h4><p>当我们使用Xcode8打开以前的旧工程的xib文件时，会弹窗提示我们选择设备。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/81f8a509gw1f96u3aal39j20ou0caq6i.jpg" alt="选择设备"></p>
<p>当我们选择之后虽然Xcode8可以查看xib文件，但是当我们使用旧版本Xcode打开查看xib文件是就会提示无法查看，需要使用高版本Xcode打开。</p>
<p><img src="http://ww4.sinaimg.cn/mw690/81f8a509gw1f96u39j5cvj20oa090gnn.jpg" alt="xib报警告"></p>
<p>想要能够在低版本Xcode查看Xib，需要在Xcode8上面重新选择xib打开的版本为Xcode7.x</p>
<p><img src="http://ww1.sinaimg.cn/mw690/81f8a509gw1f96u39kfb4j20eg0o8tch.jpg" alt="选择最低版本"></p>
<h4 id="Xcode8-打开Xib更新之后，约束报警告"><a href="#Xcode8-打开Xib更新之后，约束报警告" class="headerlink" title="Xcode8 打开Xib更新之后，约束报警告"></a>Xcode8 打开Xib更新之后，约束报警告</h4><p>被xib坑完之后，接下来就是崩溃的时刻，所有有涉及约束的视图全部报警告。我们需要更新所有存在警告视图的frame。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/81f8a509gw1f96uctfxuhj21360x87bf.jpg" alt="更新frame"></p>
<h3 id="坑七：应用提交AppStore失败"><a href="#坑七：应用提交AppStore失败" class="headerlink" title="坑七：应用提交AppStore失败"></a>坑七：应用提交AppStore失败</h3><p>使用旧版本的Application Loader进行提交。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开启吐槽模式&quot;&gt;&lt;a href=&quot;#开启吐槽模式&quot; class=&quot;headerlink&quot; title=&quot;开启吐槽模式&quot;&gt;&lt;/a&gt;开启吐槽模式&lt;/h3&gt;&lt;p&gt;为了迎合Xcode8所带来的更新，我是惊喜万分(&lt;del&gt;奔溃至极&lt;/del&gt;)。丝毫不敢怠慢，生怕跟不上入坑的队伍😂&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="Xcode" scheme="superdanny.link/tags/Xcode/"/>
    
      <category term="iOS10" scheme="superdanny.link/tags/iOS10/"/>
    
      <category term="Xcode8" scheme="superdanny.link/tags/Xcode8/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用Xcode8或iOS10 SDK</title>
    <link href="superdanny.link/2016/09/16/How-to-use-Xcode8-or-iOS10_SDK/"/>
    <id>superdanny.link/2016/09/16/How-to-use-Xcode8-or-iOS10_SDK/</id>
    <published>2016-09-16T15:59:00.000Z</published>
    <updated>2016-11-30T01:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>由于Xcode8 不再支持第三方插件，对于大部分开发者来说是一个噩耗！我也不例外，为了能够找到解决方案，我出去外面查阅了很多资料，总的来说有两种方案，一种是重签名Xcode8，另外一种是变相使用Xcode7.3.1运行iOS10 SDK。目前我采用的是方案二。</p>
<a id="more"></a>
<h3 id="方案一：重签名Xcode8"><a href="#方案一：重签名Xcode8" class="headerlink" title="方案一：重签名Xcode8"></a>方案一：重签名Xcode8</h3><p>本方案转载至<a href="https://medium.com/@vong9262" target="_blank" rel="external">Vong</a></p>
<ol>
<li>编译 MakeXcodeGr8Again 并且导出其 product (关于 MakeXcodeGr8Again，下文会详细说到)。</li>
<li>退出 Xcode8，同时运行刚刚导出的 MakeXcodeGr8Again，将 Xcode8 拖入其中，等待一段时间(3~10分钟)。</li>
<li>等菊花转完后，应用程序文件夹下会生成一个 XcodeGr8 的应用，运行命令 sudo xcode-select -s /Applications/XcodeGr8.app/Contents/Developer 将 Xcode 开发路径指向刚生成的 XcodeGr8。</li>
<li>既然 Xcode8 的签名已被移除，那么就可以继续使用上面的修复插件失效代码。但是上面的脚本要稍微改一下就是把 Xcode.app 换成 XcodeGr8.app 即可。代码如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I&#123;&#125; defaults write &#123;&#125; DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/XcodeGr8.app/Contents/Info.plist DVTPlugInCompatibilityUUID`</div></pre></td></tr></table></figure>
<p>下面我们来看下步骤1提到的 MakeXcodeGr8Again，其 ReadMe 也有对应的介绍。这里大概摘录一下:</p>
<blockquote>
<p>苹果为了避免类似 <a href="https://en.wikipedia.org/wiki/XcodeGhost" target="_blank" rel="external">Xcode Ghost 👻</a> 事件的再次发生，Xcode8 禁用了插件机制，而开放了另一种形式：<a href="https://developer.apple.com/videos/play/wwdc2016/414/" target="_blank" rel="external">Source Editor extensions</a>，但是这种形式局限性太大。MakeXcodeGr8Again 只是去除了它的签名，这样使得 Xcode8 也可以继续使用插件了。由于签名被移除，所以它的安全性又重回 Xcode7 时代，也就是还有可能受到类似 Xcode Ghost 的攻击。所以不推荐用 XcodeGr8 来提交应用到 Appstore。Use at your own risk.</p>
</blockquote>
<h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><ol>
<li>生成了 XcodeGr8 之后，打不开。 解决方法：重启。</li>
<li>如果之前对其它版本的 Xcode-beat 也有使用这种方式，再对 Xcode8 GM 也是用该方式可能 MakeXcodeGr8Again 这个 APP 会一直闪退。 解决方法：卸载之前生成的 XcodeGr8，再重试。卸载后记得将开发路径重新指回原来的路径，即 sudo xcode-select -s /Applications/Xcode.app/Contents/Developer。如果这种方式还不行，卸载所有版本的 Xcode，然后再安装 GM 版，重复上述步骤。</li>
<li>如果要卸载 XcodeGr8，记得将重新开发路径置回初始状态。</li>
</ol>
<p>最后，重要的事情说三遍：<br> <strong>不要使用 XcodeGr8 打包上传 Appstore，最好使用服务器打包，保证服务器 Xcode 是 Appstore 下载的！！！<br> 不要使用 XcodeGr8 打包上传 Appstore，最好使用服务器打包，保证服务器 Xcode 是 Appstore 下载的！！！<br> 不要使用 XcodeGr8 打包上传 Appstore，最好使用服务器打包，保证服务器 Xcode 是 Appstore 下载的！！！</strong></p>
<h3 id="方案二：在Xcode7-3-1中使用iOS10-SDK"><a href="#方案二：在Xcode7-3-1中使用iOS10-SDK" class="headerlink" title="方案二：在Xcode7.3.1中使用iOS10 SDK"></a>方案二：在Xcode7.3.1中使用iOS10 SDK</h3><p>本方案来至<a href="http://stackoverflow.com/a/37945377" target="_blank" rel="external">how-use-xcode-7-with-ios-10</a></p>
<p>文章的意思就是将Xcode8的iOS10 SDK拷贝到Xcode7上面，然后再创建一个软链接即可。</p>
<p>You need use DeveloperDiskImage from Xcode 8. For this extract Xcode 8 app and copy DeveloperDiskImage for iOS 10 to your Xcode folder.</p>
<p>Suppose you extract Xcode to /Applications/Xcode8.app</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -r /Applications/Xcode8.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/10.0\ \(14A345\) /Applications/Xcode7.3.1.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</div></pre></td></tr></table></figure>
<p>After copy DeveloperDiskImage you should start Xcode and connect iOS device to your mac.</p>
<p>Edit:<br>With a standard Xcode install one can create a soft link:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo ln -s \</div><div class="line">/Applications/Xcode8.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/10.0\ \(14A345\) \</div><div class="line">/Applications/Xcode7.3.1.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/10.0</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;由于Xcode8 不再支持第三方插件，对于大部分开发者来说是一个噩耗！我也不例外，为了能够找到解决方案，我出去外面查阅了很多资料，总的来说有两种方案，一种是重签名Xcode8，另外一种是变相使用Xcode7.3.1运行iOS10 SDK。目前我采用的是方案二。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="Xcode" scheme="superdanny.link/tags/Xcode/"/>
    
      <category term="iOS10" scheme="superdanny.link/tags/iOS10/"/>
    
      <category term="Xcode8" scheme="superdanny.link/tags/Xcode8/"/>
    
  </entry>
  
  <entry>
    <title>升级CocoaPods后存在的问题</title>
    <link href="superdanny.link/2016/05/16/CocoaPods-concrete-target/"/>
    <id>superdanny.link/2016/05/16/CocoaPods-concrete-target/</id>
    <published>2016-05-16T06:19:00.000Z</published>
    <updated>2016-12-04T07:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天由于需要，去升级了CocoaPods的版本，更新版本完成之后，在执行<code>pod install</code>指令时出现了问题。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[!] The dependency `AFNetworking` is not used <span class="keyword">in</span> any concrete target.</div><div class="line">The dependency `SDWebImage` is not used <span class="keyword">in</span> any concrete target.</div></pre></td></tr></table></figure>
<p>根据提示，是说我没有给这些第三方库指明对应的target。<code>Podfile</code>升级之后到最新版本，pod里的内容必须明确指出所用第三方库的target，否则会出现<strong>The dependency `` is not used in any concrete target</strong>这样的错误。</p>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>原本我工程里面<code>Podfile</code>是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line">use_frameworks!</div><div class="line">pod &apos;AFNetworking&apos;</div><div class="line">pod &apos;SDWebImage&apos;</div></pre></td></tr></table></figure>
<p>现在需要修改<code>Podfile</code>的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line">use_frameworks!</div><div class="line">target &quot;Project target&quot; do</div><div class="line">pod &apos;AFNetworking&apos;</div><div class="line">pod &apos;SDWebImage&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这样再运行<code>pod install</code>指令就会成功了。</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;今天由于需要，去升级了CocoaPods的版本，更新版本完成之后，在执行&lt;code&gt;pod install&lt;/code&gt;指令时出现了问题。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[!] The dependency `AFNetworking` is not used &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; any concrete target.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The dependency `SDWebImage` is not used &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; any concrete target.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据提示，是说我没有给这些第三方库指明对应的target。&lt;code&gt;Podfile&lt;/code&gt;升级之后到最新版本，pod里的内容必须明确指出所用第三方库的target，否则会出现&lt;strong&gt;The dependency `` is not used in any concrete target&lt;/strong&gt;这样的错误。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="终端" scheme="superdanny.link/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="CocoaPods" scheme="superdanny.link/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS修改导航堆栈视图</title>
    <link href="superdanny.link/2016/04/26/iOS-Change-navigation-stack/"/>
    <id>superdanny.link/2016/04/26/iOS-Change-navigation-stack/</id>
    <published>2016-04-26T09:46:00.000Z</published>
    <updated>2017-01-11T03:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有时候我们需要在视图跳转时，或者某些操作时需要将导航堆栈中的某个视图或多个视图移除堆栈中，目的是为了让返回过程中不会经过需要移除的视图。</p>
<a id="more"></a>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//比如：vc1 push vc2。vc2 push vc3。然后vc2从导航堆栈中移除。</span></div><div class="line"><span class="comment">//可以在vc2中实现如下代码</span></div><div class="line"><span class="comment">//跳转到vc3</span></div><div class="line">ViewController *vc3 = [[ViewController alloc] init];</div><div class="line">[<span class="keyword">self</span>.navigationController pushViewController:vc3 animated:<span class="literal">YES</span>];</div><div class="line">    </div><div class="line"><span class="built_in">NSMutableArray</span> *arr = <span class="keyword">self</span>.navigationController.viewControllers.mutableCopy;</div><div class="line"><span class="comment">//操作arr</span></div><div class="line">[arr removeObject:weakSelf];</div><div class="line"><span class="keyword">self</span>.navigationController.viewControllers = arr;</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;有时候我们需要在视图跳转时，或者某些操作时需要将导航堆栈中的某个视图或多个视图移除堆栈中，目的是为了让返回过程中不会经过需要移除的视图。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="导航栏" scheme="superdanny.link/tags/%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods切换国内镜像源以及镜像源制作</title>
    <link href="superdanny.link/2016/04/20/Change-CocoaPods-Source/"/>
    <id>superdanny.link/2016/04/20/Change-CocoaPods-Source/</id>
    <published>2016-04-20T12:13:00.000Z</published>
    <updated>2016-11-30T01:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>很多时候我们需要借助CocoaPods管理第三方开源类库，但是由于国内开发者直接使用CocoaPods是经常速度缓慢导致更新或者安装时候需要等待非常长的时间。</p>
<a id="more"></a>
<p>方法有几种：</p>
<ol>
<li>借助VPN来解决</li>
<li>很多时候是通过切换成国内的镜像源来达到目的。</li>
<li>在pod install、pod update的时候不升级specs库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod install --verbose --no-repo-update</div><div class="line">$ pod update --verbose --no-repo-update</div></pre></td></tr></table></figure>
<h2 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pod repo remove master</div><div class="line">pod repo add master 镜像源地址</div><div class="line">pod repo update</div><div class="line">pod setup</div></pre></td></tr></table></figure>
<h2 id="镜像源制作"><a href="#镜像源制作" class="headerlink" title="镜像源制作"></a>镜像源制作</h2><p>当然，以来与别人的镜像源也不是最好的办法。我们也可以尝试自己制作属于自己的镜像源。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --mirror https://github.com/CocoaPods/Specs.git</div></pre></td></tr></table></figure>
<h3 id="编辑config文件"><a href="#编辑config文件" class="headerlink" title="编辑config文件"></a>编辑config文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[core]</div><div class="line">        repositoryformatversion = 0</div><div class="line">        filemode = true</div><div class="line">        bare = true</div><div class="line">[remote &quot;origin&quot;]</div><div class="line">        fetch = +refs/heads/*:refs/heads/*</div><div class="line">        fetch = +refs/tags/*:refs/tags/*</div><div class="line">        mirror = true</div><div class="line">        url = https://github.com/CocoaPods/Specs.git</div><div class="line">[remote &quot;mirrors&quot;]</div><div class="line">        url = git@gitcafe.com:lloydsheng/Specs.git</div><div class="line">        mirror = true</div><div class="line">        skipDefaultUpdate = true</div></pre></td></tr></table></figure>
<h3 id="定期同步"><a href="#定期同步" class="headerlink" title="定期同步"></a>定期同步</h3><p>编辑同步脚本specssync.sh，添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch remote</div><div class="line">git push mirrors</div></pre></td></tr></table></figure>
<p>设置cronjob每半个小时同步一次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">30 * * * * /home/git/specssync.sh  &gt; /var/log/</div><div class="line">specssync.log 2&gt;&amp;1</div></pre></td></tr></table></figure>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;很多时候我们需要借助CocoaPods管理第三方开源类库，但是由于国内开发者直接使用CocoaPods是经常速度缓慢导致更新或者安装时候需要等待非常长的时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac端" scheme="superdanny.link/categories/Mac%E7%AB%AF/"/>
    
    
      <category term="终端" scheme="superdanny.link/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="CocoaPods" scheme="superdanny.link/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>swift中的枚举,结构体和类(简译)</title>
    <link href="superdanny.link/2016/03/09/Swift-Getting-to-Know-Enums-Structs-and-Classes/"/>
    <id>superdanny.link/2016/03/09/Swift-Getting-to-Know-Enums-Structs-and-Classes/</id>
    <published>2016-03-09T01:40:00.000Z</published>
    <updated>2017-05-15T06:10:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将对阅读的<a href="https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift?utm_source=raywenderlich.com+Weekly&amp;utm_campaign=42d1655b52-raywenderlich_com_Weekly3_08_2016&amp;utm_medium=email&amp;utm_term=0_83b6edc87f-42d1655b52-415085925" target="_blank" rel="external">国外文章</a>进行自己的理解翻译，有哪些不对的地方还望指正。</p>
<a id="more"></a>
<h1 id="Swift类型"><a href="#Swift类型" class="headerlink" title="Swift类型"></a>Swift类型</h1><p>Swift有三个吸引人的地方就是它的<code>安全</code>，<code>快速</code>，<code>简单</code>。</p>
<p>安全意味着它很难在你编写完程序之后在运行期间出现某些错误，导致你无法捕获。并且在编写代码期间它也能够检测到代码存在的问题并加以提示，而不是等到运行程序之后有问题你才去寻找问题所在。</p>
<p>此外，Swift可以让你更清楚的知道代码的作用是什么，并且帮助优化你的代码。</p>
<p>Swift的核心在于简单和高度规范化。实现这个的关键在于Swift的类型系统：</p>
<p><img src="http://wx3.sinaimg.cn/large/81f8a509gy1ffm0nf0b19j219e0coq44.jpg" alt="六大类型"></p>
<p>系统由4个命名类型： <code>protocol(协议)</code>, <code>enum(枚举)</code>, <code>struct(结构体)</code>, <code>class(类)</code> 以及2个组合类型：<code>tuple(元组)</code>, <code>function(函数)</code> 组成。</p>
<p>可能你会觉得还有其他的基本类型：Bool, Int, UInt, Float, Double, Character, String, Array, Set, Dictionary, Optional 等等。其实他们都是建立在命名类型上并且作为Swift标准库中的一部分。</p>
<p>本文只针对命名类型中的<code>enum(枚举)</code>, <code>struct(结构体)</code>, <code>class(类)</code>进行展开。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>当我们需要给某些属性赋已经规定好值的时候。如果我们自己手动拼写字符串的形式，那么很容易出现拼错的情况。就比如，人类根据肤色可以分为三种：黄种人(yellow)，白种人(white)，黑种人（black）<br>假如我们使用通过手动拼写字符串的形式进行赋值时，那么可能会出现下面这种情况：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> human: <span class="type">Human</span> = <span class="type">Human</span>()</div><div class="line">human.skinColor = <span class="string">"whit"</span></div></pre></td></tr></table></figure>
<p>由于采用字符串的方式输入，导致我们错误的将<code>white</code>写成了<code>whit</code>这个时候就不能将这个人正确的分类。</p>
<p>这个时候枚举就起到作用了。我们使用枚举的形式将特定的类型封装好，在使用的时候，通过选择的方式，避免了输入有误的情况发生。</p>
<blockquote>
<p>枚举成员的值的类型可以是字符串，字符，或是一个整型值或浮点数</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一：手动赋值</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ColorName</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Yellow</span> = <span class="string">"Yellow"</span></div><div class="line">  <span class="keyword">case</span> <span class="type">White</span> = <span class="string">"White"</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Black</span> = <span class="string">"Black"</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//方式二：编译器自动将成员名以字符串形式作为其值</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ColorName</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Yellow</span></div><div class="line">  <span class="keyword">case</span> <span class="type">White</span></div><div class="line">  <span class="keyword">case</span> <span class="type">Black</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> human: <span class="type">Human</span> = <span class="type">Human</span>()</div><div class="line"><span class="comment">//这个时候编译器会告知你输入错误</span></div><div class="line">human.skinColor = <span class="type">ColorName</span>.<span class="type">Whit</span></div><div class="line"><span class="comment">//正确识别</span></div><div class="line">human.skinColor = <span class="type">ColorName</span>.<span class="type">White</span></div></pre></td></tr></table></figure>
<h3 id="关联值-Associated-Values"><a href="#关联值-Associated-Values" class="headerlink" title="关联值(Associated Values)"></a>关联值(Associated Values)</h3><p>就比如上面的颜色例子来说，我们表示颜色的有多种形式：名称, RGB, HSL(色调(H)、饱和度(S)、亮度(L))等等。<br>我们如何将这些统一规范起来呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ColorModel</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Named</span>(<span class="type">ColorName</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">RGB</span>(<span class="type">UInt8</span>, <span class="type">UInt8</span>, <span class="type">UInt8</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面存储关联值的做法，我们就可以利用 ColorModel 中其中一种状态来表示颜色。这样的好处在于：</p>
<ol>
<li>成员 Named 也只能用已经给定的属性进行赋值</li>
<li>RGB中的UInt8取值范围在0~255，符合取值范围</li>
</ol>
<h3 id="通过-Protocols-协议配合-extension-扩展枚举功能"><a href="#通过-Protocols-协议配合-extension-扩展枚举功能" class="headerlink" title="通过 Protocols 协议配合 extension 扩展枚举功能"></a>通过 Protocols 协议配合 extension 扩展枚举功能</h3><blockquote>
<p>在Swift中，像enum(枚举)等命名类型都可以通过继承 Protocols 协议进行功能扩展，达到我们需要的功能。</p>
</blockquote>
<p>形式一：通过继承 CustomStringConvertible 协议扩展枚举打印功能</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ColorModel</span> : <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Named</span>(<span class="keyword">let</span> colorName):</div><div class="line">            <span class="keyword">return</span> colorName.rawValue</div><div class="line">        <span class="keyword">case</span> .<span class="type">RGB</span>(<span class="keyword">let</span> red, <span class="keyword">let</span> green, <span class="keyword">let</span> blue):</div><div class="line">            <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">"#%02X%02X%02X"</span>, red,green,blue)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过 extension 扩展和继承，实现枚举的`description`功能</span></div><div class="line"><span class="keyword">let</span> color1 = <span class="type">ColorModel</span>.<span class="type">Named</span>(.<span class="type">Red</span>)</div><div class="line"><span class="keyword">let</span> color2 = <span class="type">ColorModel</span>.<span class="type">RGB</span>(<span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>)</div><div class="line"></div><div class="line"><span class="comment">//color1.description</span></div><div class="line"><span class="comment">//color2.description</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"color1 = \(color1), color2 = \(color2)"</span>)<span class="comment">// prints color1 = Red, color2 = #AAAAAA</span></div></pre></td></tr></table></figure>
<p>形式二：扩展枚举初始化功能</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ColorModel</span> </span>&#123;</div><div class="line">  <span class="keyword">init</span>(gray: <span class="type">UInt8</span>) &#123;</div><div class="line">    <span class="keyword">self</span> = .<span class="type">RGB</span>(gray, gray, gray)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过 extension 扩展，实现初始化枚举类型时赋值初始值</span></div><div class="line"><span class="keyword">let</span> color3 = <span class="type">ColorModel</span>(gray: <span class="number">0xaa</span>)</div><div class="line"><span class="built_in">print</span>(color3)  <span class="comment">//  prints #AAAAAA</span></div></pre></td></tr></table></figure>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>上述例子中，我们定义的 ColorName 枚举仅仅是为了给 ColorModel 枚举使用，没必要将 ColorName 给外部知道。所以可以将 ColorName 的定义放在 ColorModel 的扩展里面。作为其一部分即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ColorModel</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ColorName</span> : <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">Black</span>, <span class="type">Silver</span>, <span class="type">Gray</span>, <span class="type">White</span>, <span class="type">Maroon</span>, <span class="type">Red</span>, <span class="type">Purple</span>, <span class="type">Fuchsia</span>, <span class="type">Green</span>, <span class="type">Lime</span>, <span class="type">Olive</span>, <span class="type">Yellow</span>, <span class="type">Navy</span>, <span class="type">Blue</span>, <span class="type">Teal</span>, <span class="type">Aqua</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: Swift的一个特点之一就是你不需要在使用这个命名类型之前声明它。这也是与C/C++/Objective-C的不同之处。</p>
</blockquote>
<p>另外，在Swift中是没有宏定义的说法的，那么我们可以通过枚举的方式将部分数学宏封装起来。比如经常用到的 M_PI 我们通过定义枚举 Math。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Math</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> pi = <span class="number">3.1415926535897932384626433832795028841971694</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="值类型-vs-引用类型"><a href="#值类型-vs-引用类型" class="headerlink" title="值类型 vs 引用类型"></a>值类型 vs 引用类型</h3><p>未完待续…</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>未完待续…</p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将对阅读的&lt;a href=&quot;https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift?utm_source=raywenderlich.com+Weekly&amp;amp;utm_campaign=42d1655b52-raywenderlich_com_Weekly3_08_2016&amp;amp;utm_medium=email&amp;amp;utm_term=0_83b6edc87f-42d1655b52-415085925&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;国外文章&lt;/a&gt;进行自己的理解翻译，有哪些不对的地方还望指正。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="Swift" scheme="superdanny.link/tags/Swift/"/>
    
      <category term="读书笔记" scheme="superdanny.link/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apple Pay 入门（转）</title>
    <link href="superdanny.link/2016/02/20/iOS-Apple-Pay/"/>
    <id>superdanny.link/2016/02/20/iOS-Apple-Pay/</id>
    <published>2016-02-20T05:30:00.000Z</published>
    <updated>2016-11-30T01:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/apple-pay/get-started/" target="_blank" rel="external">Pay官方参考资料</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>利用 Apple Pay，用户可以在您的 App 中轻松安全地购买实物商品和服务。客户更喜欢使用 Apple Pay，因为他们在购物时无需输入账单、送货和联系人详细信息。而且，Apple Pay 具有更高的安全性，能让客户和开发者安心使用。Apple 不会存储或共享客户的实际信用卡和借记卡卡号，因此商家和 App 开发者无需负责管理和保护实际的信用卡和借记卡卡号。进一步了解 <a href="https://support.apple.com/zh-cn/HT203027" target="_blank" rel="external">Apple Pay 的安全与隐私政策</a>。</p>
<a id="more"></a>
<p>由于具备这些优点，在按照推荐方式实施了 Apple Pay 之后，开发者的结账转换率提高为原来的 2 倍，结账时间也大幅缩短；而且，在整合了 Apple Pay 之后，客户的忠诚度和购买频率也都提高了。</p>
<p>在您的 App 中，用户可以使用 Touch ID 为付款授权，以释放安全地存储在 iPhone 和 iPad 上的令牌化信用卡和借记卡付款凭证。此外，用户还可将其账单、送货和联系人信息存储在 Wallet 这一 App 中。这样一来，当客户在您的 App 中使用 Touch ID 为购买项目授权时，系统就会随付款凭证一道提供这些信息。</p>
<p>目前，Apple Pay 可在澳大利亚、加拿大、中国、英国和美国使用。</p>
<h2 id="Apple-Pay-或-App-内购买项目"><a href="#Apple-Pay-或-App-内购买项目" class="headerlink" title="Apple Pay 或 App 内购买项目"></a>Apple Pay 或 App 内购买项目</h2><p>了解 Apple Pay 和“App 内购买项目”之间的区别非常重要。使用 Apple Pay 可销售实物商品，如食品杂货、服装和电器。也可通过 Apple Pay 提供各种服务，如俱乐部会员、酒店预订和活动门票。而使用“App 内购买项目”则可销售虚拟商品，如适用于您的 App 的优质内容及订阅数字内容。</p>
<p><a href="https://developer.apple.com/library/ios/ApplePay_Guide/" target="_blank" rel="external">《Apple Pay 编程指南》</a>（“Apple Pay Programming Guide”）提供了有关如何使用 PassKit 框架整合 Apple Pay 的详细信息。<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html" target="_blank" rel="external">《App 内购买项目编程指南》</a>（“In-App Purchase Programming Guide”）提供了有关如何使用 StoreKit 框架整合 App 内购买项目的详细信息。</p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>除了使用 PassKit 框架实施 Apple Pay 之外，您还必须：</p>
<ul>
<li>通过<a href="https://developer.apple.com/apple-pay/" target="_blank" rel="external">付款处理机构或网关</a>设置一个帐户。</li>
<li>通过“<a href="https://developer.apple.com/account/ios/identifiers/merchant/merchantLanding.action" target="_blank" rel="external">证书、标识符和描述文件</a>”（“Certificates, Identifiers &amp; Profiles”）注册一个商家 ID。</li>
<li>生成一个 <a href="https://developer.apple.com/account/ios/certificate/certificateCreate.action" target="_blank" rel="external">Apple Pay 证书</a>，用于加密和解密付款令牌。</li>
<li>在您的 App 中包括一个 Apple Pay 授权。</li>
<li>遵循“应用审核准则”的第 29 节中列出的要求。</li>
<li>遵循<a href="https://developer.apple.com/app-store/review/guidelines/#apple-pay" target="_blank" rel="external">《App 审核准则》</a>(“App Review Guidelines”)第 29 节中列出的要求。</li>
</ul>
<h2 id="支付供应商"><a href="#支付供应商" class="headerlink" title="支付供应商"></a>支付供应商</h2><p>强烈建议选择支持 Apple Pay 并提供 SDK 的<a href="https://developer.apple.com/apple-pay/" target="_blank" rel="external">支付供应商</a>。您也可以提供自己的服务器端解决方案，以用于从您的 App 接收付款、解密付款令牌并与支付供应商进行互动。信用卡和借记卡付款的处理可能非常复杂。如果您不具备相应的专业知识和系统，又希望您的 App 支持 Apple Pay，使用支付供应商提供的 SDK 是最为便捷可靠的一种方式。</p>
<h2 id="显示-Apple-Pay-按钮"><a href="#显示-Apple-Pay-按钮" class="headerlink" title="显示 Apple Pay 按钮"></a>显示 Apple Pay 按钮</h2><p>PassKit 提供了各种 API，您的 App 可以使用这些 API 来确定自己所在的设备上是否装有 Secure Element，以及设备是否已加载您所支持的付款卡。</p>
<p>如果设备已启用 Apple Pay，则您应该使用 PassKit 内提供的 API 来显示“用 Apple Pay 购买”按钮。</p>
<p>如果设备没有 Apple Pay，则您可以显示“设置 Apple Pay”按钮以代替“用 Apple Pay 购买”按钮，以便用户方便地设置 Apple Pay。或者，您也可以选择不显示 Apple Pay 按钮。</p>
<p>在您的 App 中放置 Apple Pay 按钮时，必须遵循<a href="https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf" target="_blank" rel="external">《Apple Pay 识别标志指南》</a>（“Apple Pay Identity Guidelines”）。</p>
<h2 id="显示付款单"><a href="#显示付款单" class="headerlink" title="显示付款单"></a>显示付款单</h2><p>在您的用户选择好要购买的商品或服务，并选择 Apple Pay 作为付款方式时，您会创建一个付款请求，并要求 PassKit 向客户显示付款单。请参见图 1。在用户轻点 Apple Pay 按钮后，付款单必须立即显示，中间不能出现任何临时屏幕或弹出窗口。</p>
<p>您的 App 可以指定付款单的内容，但无法控制用户与其进行的互动。您必须确定，向用户显示送货信息、账单信息、送货方式和其他行项目是否有意义。您只应请求处理交易所需的信息。</p>
<p>有关为您的 App 整合 Apple Pay 按钮和定制 Apple Pay 付款单的详细信息，请参考<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/ApplePay.html#//apple_ref/doc/uid/TP40006556-CH69-SW1" target="_blank" rel="external">《iOS 人机界面准则》</a>（“iOS Human Interface Guidelines”）。</p>
<p><strong>图1</strong><br><img src="https://developer.apple.com/apple-pay/images/figure-1-payment-sheet-cn_2x.png" alt="付款单"></p>
<h2 id="付款令牌"><a href="#付款令牌" class="headerlink" title="付款令牌"></a>付款令牌</h2><p>在用户使用 Touch ID 和银行 PIN 码进行授权（必要时）后，您的 App 会从 PassKit 收到一个付款令牌。该付款令牌内含有完成付款交易所需的信息，包括设备特定的帐户编号、金额以及唯一的一次性密码。已加密的付款套装可由商家使用私有密钥证书来解密，也可由付款处理机构使用 SDK 替商家代为解密。</p>
<p>在有些情况下，开发者可能未被设置为负责记录和处理付款的商家。在这种情况下，开发者可以解密付款令牌，并将解密后的令牌传递给下游合适的商家，以便相应的处理机构进行处理。App 必须清楚表明自己只是一个中介方。更多详细信息，请参考<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/ApplePay.html#//apple_ref/doc/uid/TP40006556-CH69-SW1" target="_blank" rel="external">《iOS 人机界面准则》</a>（“iOS Human Interface Guidelines”）。</p>
<p>图 2 展示了一个典型的付款流程。首先，App 会检查其是否支持 Apple Pay 作为付款方式。在本例中，App 需要与所选送货地址相应的邮政编码，以计算送货成本并更新应付的总金额。在用户完成付款授权后，您的 App 会通过 PassKit 从 Secure Element 收到一个付款令牌。</p>
<p>最后， App 会调用付款处理机构 SDK 中的相应 API，以将付款信息传送至付款处理机构，交由其处理。</p>
<p><strong>图2</strong><br><img src="https://developer.apple.com/apple-pay/images/figure-2-payment-flow-cn_2x.png" alt="付款流程"></p>
<h2 id="支持的交易类型"><a href="#支持的交易类型" class="headerlink" title="支持的交易类型"></a>支持的交易类型</h2><p>要处理以下类型的电子商务交易，必须要有支持 Apple Pay 的付款处理机构 SDK。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">授权	付款处理机构	在客户的帐户上预留资金</div><div class="line">收款	付款处理机构	在订单成功完成后将资金转账到您的银行帐户</div><div class="line">部分发货	付款处理机构	针对无法一同发货的商品将某次购物分成多次付款（在中国不可用）</div><div class="line">重复付款	付款处理机构 - 应在 App 中清楚标出	处理针对服务的重复付款，如按月支付的健身房会费（在中国不可用）</div><div class="line">退单	付款处理机构	处理欺诈性交易或存在争议的交易</div></pre></td></tr></table></figure>
<p>最佳做法<br>查看<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/ApplePay.html#//apple_ref/doc/uid/TP40006556-CH69-SW1" target="_blank" rel="external">《iOS 人机界面准则》</a>（“iOS Human Interface Guidelines”）和 WWDC 研讨会视频“<a href="https://developer.apple.com/videos/wwdc/2015/?id=702" target="_blank" rel="external">App 内的 Apple Pay</a>”（“Apple Pay Within Apps”），并按照其中的指南操作。此外，请遵循以下最佳做法，以便让您的 App 呈现最佳效果。</p>
<p>不必要求用户注册。<br>除非确有必要，否则用户在使用 Apple Pay 购物时不必要求他们注册。您可以在客户购物时获得必需的联系信息；客户遇到的阻碍越少，其改变付款方式的机率就越低。</p>
<p>在产品详细信息页面和购物车结账页面添加 Apple Pay 按钮。<br>在产品详细信息页面上，除了“添加到购物车”按钮之外，还要放置一个 Apple Pay 按钮，以便客户在找到想要购买的产品后立即结账。还要确保在购物车结账页面上添加 Apple Pay 作为付款选项。</p>
<p>在醒目的位置显示 Apple Pay 按钮，或将默认付款方式设为 Apple Pay。<br>对于已经在其 iOS 设备上设置了 Apple Pay 的用户，提供 Apple Pay 作为主要的付款选项。</p>
<p>请勿要求用户提供除 Apple Pay 付款单之外的其他信息。<br>Apple Pay 付款单中含有送货地址、账单地址、电话号码、电子邮件和姓名。客户也可以在付款单中选择送货方式。要求用户提供付款单之外的其他信息会增加阻碍，这可能会导致客户放弃购买。</p>
<h2 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h2><p><strong>1. 哪些付款提供商支持此服务？</strong><br>    有关付款提供商列表，请参阅 <a href="https://developer.apple.com/apple-pay/" target="_blank" rel="external">Apple Pay 开发者信息页面</a>。</p>
<p><strong>2. 支持哪些支付网络？</strong><br>    支持参加计划的银行所发行的 Visa、MasterCard、American Express、Discover 和中国银联信用卡和借记卡。</p>
<p><strong>3. 支持哪些卡片类型？</strong><br>    支持主要发卡行所发行的信用卡和借记卡。</p>
<p><strong>4. 接受 Apple Pay 需要支付其他费用吗？</strong><br>    对于使用 Apple Pay 付款的用户、商家或开发者，Apple 不会收取任何费用。</p>
<p><strong>5. 我能否将 Apple Pay 整合到采用 Web 结账方式的 App 中？</strong><br>    Apple Pay 支持原生和混合 App。对于那些采用 Web 结账方式的商家，请使用 WebKit 桥接允许数据从 Web 内容传送至原生 API（反之亦然）。</p>
<p><strong>6. 我能否在不知道最终金额的情况下使用 Apple Pay 购物？</strong><br>    对于使用 iOS 9 和更高版本的客户，您可以将金额设为“待定”。对于 iOS 9 之前的版本，您应该收取基本的金额，并在 Apple Pay 付款单的“PAY”（付款）行中指明最终金额待定。</p>
<p>在中国，商家/PSP/中国银联的付款流程均不支持此项功能，需在知晓最终金额的情况下进行购买。</p>
<p><a href="https://developer.apple.com/library/ios/samplecode/Emporium/EmporiumASimpleShoppingExperiencewithApplePay.zip" target="_blank" rel="external">官方Demo</a></p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/apple-pay/get-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pay官方参考资料&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;利用 Apple Pay，用户可以在您的 App 中轻松安全地购买实物商品和服务。客户更喜欢使用 Apple Pay，因为他们在购物时无需输入账单、送货和联系人详细信息。而且，Apple Pay 具有更高的安全性，能让客户和开发者安心使用。Apple 不会存储或共享客户的实际信用卡和借记卡卡号，因此商家和 App 开发者无需负责管理和保护实际的信用卡和借记卡卡号。进一步了解 &lt;a href=&quot;https://support.apple.com/zh-cn/HT203027&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple Pay 的安全与隐私政策&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="Apple Pay" scheme="superdanny.link/tags/Apple-Pay/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发证书&quot;此证书的签发者无效&quot;解决方法</title>
    <link href="superdanny.link/2016/02/15/iOS-Certificate-has-an-invalid-issuer/"/>
    <id>superdanny.link/2016/02/15/iOS-Certificate-has-an-invalid-issuer/</id>
    <published>2016-02-15T02:13:00.000Z</published>
    <updated>2016-11-30T01:57:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哎，每次过完节都要有一个坑给自己跳。逃不过这个魔爪。<br>这不，一过完春节，回来就发现公司证书出现”此证书的签发者无效”。<br><img src="http://ww2.sinaimg.cn/large/81f8a509gw1f100tg3i59j20eg01lq36.jpg" alt="证书签发者无效"></p>
<a id="more"></a>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>经过一番查找，苹果官方给出了回答。</p>
<blockquote>
<p>Thanks for bringing this to the attention of the community and apologies for the issues you’ve been having. This issue stems from having a copy of the expired WWDR Intermediate certificate in both your System and Login keychains. To resolve the issue, you should first download and install the new <a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" target="_blank" rel="external">WWDR intermediate certificate</a> (by double-clicking on the file). Next, in the Keychain Access application, select the System keychain. Make sure to select “Show Expired Certificates” in the View menu and then delete the expired version of the Apple Worldwide Developer Relations Certificate Authority Intermediate certificate (expired on February 14, 2016). Your certificates should now appear as valid in Keychain Access and be available to Xcode for submissions to the App Store.</p>
</blockquote>
<p>看来是由于苹果系统的安全证书过期问题导致。<br><img src="http://ww4.sinaimg.cn/large/81f8a509gw1f100ti4ritj20jx05sgmo.jpg" alt="过期的安全证书"></p>
<p>苹果早在一个多月前就提醒开发者使用新证书。开发者如果不及时更新，不仅会影响到自己的开发工作，还有可能对用户造成困扰。这一份通知面向的是那些开发应用与 Apple Wallet、Safari 推送中心又或者是 Safari 插件相关的开发者。苹果还在通知中表示，开发者需要在 2016 年 2 月 14 日结束之前更新他们的安全证书。更新之后，安全证书的下一个失效期为 2023 年 2 月。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>既然知道了原因，那么就可以对症下药了。我们通过下载苹果提供的最新的<a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" target="_blank" rel="external">安全证书</a>并双击安装。</p>
<ol>
<li>然后打开钥匙串，在导航栏上，依次选择<code>显示</code>-<code>显示已过期的证书</code><br> <img src="http://ww3.sinaimg.cn/mw690/81f8a509gw1f100tfcdg9j21740gsjv4.jpg" alt="显示已过期的证书"> </li>
<li>选择<code>登录</code>-<code>所有项目</code></li>
<li>在搜索栏下输入 apple w</li>
<li>删除对应过期的安全证书</li>
</ol>
<p><img src="http://ww3.sinaimg.cn/large/81f8a509gw1f100tau6guj20ud0c476j.jpg" alt="流程"> </p>
<hr>
<p>再一次感谢您花费时间阅读这篇文章！</p>
<p>微博： <a href="http://weibo.com/2180556041" target="_blank" rel="external">@Danny_吕昌辉</a><br>博客： <a href="http://SuperDannyBlog.farbox.com" target="_blank" rel="external">SuperDanny</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;哎，每次过完节都要有一个坑给自己跳。逃不过这个魔爪。&lt;br&gt;这不，一过完春节，回来就发现公司证书出现”此证书的签发者无效”。&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/81f8a509gw1f100tg3i59j20eg01lq36.jpg&quot; alt=&quot;证书签发者无效&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="superdanny.link/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="superdanny.link/tags/iOS/"/>
    
      <category term="证书无效" scheme="superdanny.link/tags/%E8%AF%81%E4%B9%A6%E6%97%A0%E6%95%88/"/>
    
  </entry>
  
</feed>
